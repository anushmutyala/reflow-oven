
reflow_oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005c88  08005c88  00006c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800603c  0800603c  0000703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006040  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001d4  08006214  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006214  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c43  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001952  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ae  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9c  00000000  00000000  0001370e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2d0  00000000  00000000  0002b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085634  00000000  00000000  0003577a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000badae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003480  00000000  00000000  000badf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000be274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c70 	.word	0x08005c70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005c70 	.word	0x08005c70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fb4e 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f826 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 f8c8 	bl	8000fac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1c:	f000 f864 	bl	8000ee8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e20:	f000 f89a 	bl	8000f58 <MX_USART1_UART_Init>
//		  HAL_UART_Transmit(&huart1, data_print, sizeof(data_print), 100);
//	  } else {
//		  HAL_UART_Transmit(&huart1, test_string, sizeof(test_string), 100);
//	  }

	  temp=Max6675_Read_Temp();
 8000e24:	f000 f928 	bl	8001078 <Max6675_Read_Temp>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <main+0x48>)
 8000e2c:	6013      	str	r3, [r2, #0]
	  sprintf(data_print,"T=%0.2fC  ",temp);
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <main+0x48>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fbac 	bl	8000590 <__aeabi_f2d>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4906      	ldr	r1, [pc, #24]	@ (8000e58 <main+0x4c>)
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <main+0x50>)
 8000e40:	f002 fd1e 	bl	8003880 <siprintf>
	  HAL_UART_Transmit(&huart1, data_print, sizeof(data_print), 100);
 8000e44:	2364      	movs	r3, #100	@ 0x64
 8000e46:	221e      	movs	r2, #30
 8000e48:	4904      	ldr	r1, [pc, #16]	@ (8000e5c <main+0x50>)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <main+0x54>)
 8000e4c:	f001 fee7 	bl	8002c1e <HAL_UART_Transmit>
	  temp=Max6675_Read_Temp();
 8000e50:	bf00      	nop
 8000e52:	e7e7      	b.n	8000e24 <main+0x18>
 8000e54:	20000290 	.word	0x20000290
 8000e58:	08005c88 	.word	0x08005c88
 8000e5c:	20000294 	.word	0x20000294
 8000e60:	20000248 	.word	0x20000248

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	@ 0x40
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2228      	movs	r2, #40	@ 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fde6 	bl	8003a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e9a:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fe09 	bl	8001abc <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000eb0:	f000 f8dc 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 f876 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eda:	f000 f8c7 	bl	800106c <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3740      	adds	r7, #64	@ 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <MX_SPI1_Init+0x6c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f20:	2238      	movs	r2, #56	@ 0x38
 8000f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_SPI1_Init+0x68>)
 8000f3e:	f001 f9cd 	bl	80022dc <HAL_SPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000f48:	f000 f890 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001f0 	.word	0x200001f0
 8000f54:	40013000 	.word	0x40013000

08000f58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <MX_USART1_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f001 fdf5 	bl	8002b7e <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f000 f867 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	40013800 	.word	0x40013800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a20      	ldr	r2, [pc, #128]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0320 	and.w	r3, r3, #32
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_GPIO_Init+0xb4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100e:	4815      	ldr	r0, [pc, #84]	@ (8001064 <MX_GPIO_Init+0xb8>)
 8001010:	f000 fd3c 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2110      	movs	r1, #16
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <MX_GPIO_Init+0xbc>)
 800101a:	f000 fd37 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800101e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	@ (8001064 <MX_GPIO_Init+0xb8>)
 8001038:	f000 fba4 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800103c:	2310      	movs	r3, #16
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_GPIO_Init+0xbc>)
 8001054:	f000 fb96 	bl	8001784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40011000 	.word	0x40011000
 8001068:	40010800 	.word	0x40010800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF=0;                                          // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	HAL_Delay(400);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 800107e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001082:	f000 fa77 	bl	8001574 <HAL_Delay>
	float Temp=0;                                         // Temperature Variable
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <Max6675_Read_Temp+0x68>)
 8001092:	f000 fcfb 	bl	8001a8c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1,DATARX,1,HAL_MAX_DELAY);                  // DATA Transfer
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109a:	2201      	movs	r2, #1
 800109c:	4911      	ldr	r1, [pc, #68]	@ (80010e4 <Max6675_Read_Temp+0x6c>)
 800109e:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <Max6675_Read_Temp+0x70>)
 80010a0:	f001 f9a0 	bl	80023e4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <Max6675_Read_Temp+0x68>)
 80010aa:	f000 fcef 	bl	8001a8c <HAL_GPIO_WritePin>
	//TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
	Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <Max6675_Read_Temp+0x6c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <Max6675_Read_Temp+0x6c>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	4313      	orrs	r3, r2
 80010bc:	10db      	asrs	r3, r3, #3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe50 	bl	8000d64 <__aeabi_i2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	607b      	str	r3, [r7, #4]
	Temp*=0.25;                                           // Data to Centigrade Conversation
 80010c8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f847 	bl	8000160 <__aeabi_fmul>
 80010d2:	4603      	mov	r3, r0
 80010d4:	607b      	str	r3, [r7, #4]
return Temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010800 	.word	0x40010800
 80010e4:	200002b4 	.word	0x200002b4
 80010e8:	200001f0 	.word	0x200001f0

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_MspInit+0x5c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <HAL_MspInit+0x5c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6193      	str	r3, [r2, #24]
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_MspInit+0x5c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_MspInit+0x5c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <HAL_MspInit+0x5c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <HAL_MspInit+0x5c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_MspInit+0x60>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_MspInit+0x60>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d12f      	bne.n	80011d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 8001176:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011a0:	2320      	movs	r3, #32
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 80011b4:	f000 fae6 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b8:	2340      	movs	r3, #64	@ 0x40
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 80011cc:	f000 fada 	bl	8001784 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010800 	.word	0x40010800

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <HAL_UART_MspInit+0x8c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d131      	bne.n	8001268 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <HAL_UART_MspInit+0x94>)
 800124a:	f000 fa9b 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_UART_MspInit+0x94>)
 8001264:	f000 fa8e 	bl	8001784 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f936 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <_kill>:

int _kill(int pid, int sig)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ec:	f002 fbb6 	bl	8003a5c <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2216      	movs	r2, #22
 80012f4:	601a      	str	r2, [r3, #0]
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_exit>:

void _exit (int status)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800130a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffe7 	bl	80012e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <_exit+0x12>

08001318 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e00a      	b.n	8001340 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800132a:	f3af 8000 	nop.w
 800132e:	4601      	mov	r1, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	b2ca      	uxtb	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbf0      	blt.n	800132a <_read+0x12>
  }

  return len;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e009      	b.n	8001378 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbf1      	blt.n	8001364 <_write+0x12>
  }
  return len;
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_close>:

int _close(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b0:	605a      	str	r2, [r3, #4]
  return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <_isatty>:

int _isatty(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f002 fb1e 	bl	8003a5c <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20005000 	.word	0x20005000
 800144c:	00000400 	.word	0x00000400
 8001450:	200002b8 	.word	0x200002b8
 8001454:	20000410 	.word	0x20000410

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001464:	f7ff fff8 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001468:	480b      	ldr	r0, [pc, #44]	@ (8001498 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800146a:	490c      	ldr	r1, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800146c:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001480:	4c09      	ldr	r4, [pc, #36]	@ (80014a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 faeb 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001492:	f7ff fcbb 	bl	8000e0c <main>
  bx lr
 8001496:	4770      	bx	lr
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014a0:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 80014a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014a8:	2000040c 	.word	0x2000040c

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f92b 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fe0e 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f935 	bl	800176a <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001518:	f000 f90b 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a03      	ldr	r2, [pc, #12]	@ (800155c <HAL_IncTick+0x20>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000008 	.word	0x20000008
 800155c:	200002bc 	.word	0x200002bc

08001560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	@ (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200002bc 	.word	0x200002bc

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	@ (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	@ (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	@ 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff49 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff5e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb0 	bl	80016d8 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b08b      	sub	sp, #44	@ 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	e169      	b.n	8001a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001798:	2201      	movs	r2, #1
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	f040 8158 	bne.w	8001a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001a24 <HAL_GPIO_Init+0x2a0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d05e      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017c0:	4a98      	ldr	r2, [pc, #608]	@ (8001a24 <HAL_GPIO_Init+0x2a0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d875      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017c6:	4a98      	ldr	r2, [pc, #608]	@ (8001a28 <HAL_GPIO_Init+0x2a4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d058      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017cc:	4a96      	ldr	r2, [pc, #600]	@ (8001a28 <HAL_GPIO_Init+0x2a4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d86f      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017d2:	4a96      	ldr	r2, [pc, #600]	@ (8001a2c <HAL_GPIO_Init+0x2a8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d052      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017d8:	4a94      	ldr	r2, [pc, #592]	@ (8001a2c <HAL_GPIO_Init+0x2a8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d869      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017de:	4a94      	ldr	r2, [pc, #592]	@ (8001a30 <HAL_GPIO_Init+0x2ac>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04c      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017e4:	4a92      	ldr	r2, [pc, #584]	@ (8001a30 <HAL_GPIO_Init+0x2ac>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d863      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017ea:	4a92      	ldr	r2, [pc, #584]	@ (8001a34 <HAL_GPIO_Init+0x2b0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d046      	beq.n	800187e <HAL_GPIO_Init+0xfa>
 80017f0:	4a90      	ldr	r2, [pc, #576]	@ (8001a34 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d85d      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d82a      	bhi.n	8001850 <HAL_GPIO_Init+0xcc>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d859      	bhi.n	80018b2 <HAL_GPIO_Init+0x12e>
 80017fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <HAL_GPIO_Init+0x80>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	0800187f 	.word	0x0800187f
 8001808:	08001859 	.word	0x08001859
 800180c:	0800186b 	.word	0x0800186b
 8001810:	080018ad 	.word	0x080018ad
 8001814:	080018b3 	.word	0x080018b3
 8001818:	080018b3 	.word	0x080018b3
 800181c:	080018b3 	.word	0x080018b3
 8001820:	080018b3 	.word	0x080018b3
 8001824:	080018b3 	.word	0x080018b3
 8001828:	080018b3 	.word	0x080018b3
 800182c:	080018b3 	.word	0x080018b3
 8001830:	080018b3 	.word	0x080018b3
 8001834:	080018b3 	.word	0x080018b3
 8001838:	080018b3 	.word	0x080018b3
 800183c:	080018b3 	.word	0x080018b3
 8001840:	080018b3 	.word	0x080018b3
 8001844:	080018b3 	.word	0x080018b3
 8001848:	08001861 	.word	0x08001861
 800184c:	08001875 	.word	0x08001875
 8001850:	4a79      	ldr	r2, [pc, #484]	@ (8001a38 <HAL_GPIO_Init+0x2b4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001856:	e02c      	b.n	80018b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e029      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	3304      	adds	r3, #4
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e024      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	3308      	adds	r3, #8
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e01f      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	330c      	adds	r3, #12
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e01a      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001886:	2304      	movs	r3, #4
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e013      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001894:	2308      	movs	r3, #8
 8001896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	611a      	str	r2, [r3, #16]
          break;
 800189e:	e009      	b.n	80018b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	615a      	str	r2, [r3, #20]
          break;
 80018aa:	e003      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x130>
          break;
 80018b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	@ 0xff
 80018b8:	d801      	bhi.n	80018be <HAL_GPIO_Init+0x13a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	e001      	b.n	80018c2 <HAL_GPIO_Init+0x13e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2bff      	cmp	r3, #255	@ 0xff
 80018c8:	d802      	bhi.n	80018d0 <HAL_GPIO_Init+0x14c>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x152>
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	3b08      	subs	r3, #8
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	210f      	movs	r1, #15
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	6a39      	ldr	r1, [r7, #32]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80b1 	beq.w	8001a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001904:	4b4d      	ldr	r3, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x2b8>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a4c      	ldr	r2, [pc, #304]	@ (8001a3c <HAL_GPIO_Init+0x2b8>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <HAL_GPIO_Init+0x2b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800191c:	4a48      	ldr	r2, [pc, #288]	@ (8001a40 <HAL_GPIO_Init+0x2bc>)
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a40      	ldr	r2, [pc, #256]	@ (8001a44 <HAL_GPIO_Init+0x2c0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1ec>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a48 <HAL_GPIO_Init+0x2c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1e8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3e      	ldr	r2, [pc, #248]	@ (8001a4c <HAL_GPIO_Init+0x2c8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1e4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a50 <HAL_GPIO_Init+0x2cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1e0>
 8001960:	2303      	movs	r3, #3
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001964:	2304      	movs	r3, #4
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001968:	2302      	movs	r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1ee>
 8001970:	2300      	movs	r3, #0
 8001972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001982:	492f      	ldr	r1, [pc, #188]	@ (8001a40 <HAL_GPIO_Init+0x2bc>)
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	492c      	ldr	r1, [pc, #176]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4928      	ldr	r1, [pc, #160]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4922      	ldr	r1, [pc, #136]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	491e      	ldr	r1, [pc, #120]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4918      	ldr	r1, [pc, #96]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4914      	ldr	r1, [pc, #80]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d021      	beq.n	8001a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	490e      	ldr	r1, [pc, #56]	@ (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e021      	b.n	8001a66 <HAL_GPIO_Init+0x2e2>
 8001a22:	bf00      	nop
 8001a24:	10320000 	.word	0x10320000
 8001a28:	10310000 	.word	0x10310000
 8001a2c:	10220000 	.word	0x10220000
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10120000 	.word	0x10120000
 8001a38:	10110000 	.word	0x10110000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40011400 	.word	0x40011400
 8001a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4909      	ldr	r1, [pc, #36]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f ae8e 	bne.w	8001798 <HAL_GPIO_Init+0x14>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	372c      	adds	r7, #44	@ 0x2c
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e272      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4b92      	ldr	r3, [pc, #584]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b89      	ldr	r3, [pc, #548]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x12c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x76>
 8001b24:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a7f      	ldr	r2, [pc, #508]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b78      	ldr	r3, [pc, #480]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a77      	ldr	r2, [pc, #476]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xbc>
 8001b5e:	4b72      	ldr	r3, [pc, #456]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a71      	ldr	r2, [pc, #452]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b78:	4b6b      	ldr	r3, [pc, #428]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b68      	ldr	r3, [pc, #416]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a67      	ldr	r2, [pc, #412]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fce2 	bl	8001560 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fcde 	bl	8001560 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e200      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe4>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fcce 	bl	8001560 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fcca 	bl	8001560 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1ec      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b53      	ldr	r3, [pc, #332]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x10c>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c02:	4b49      	ldr	r3, [pc, #292]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
 8001c0e:	4b46      	ldr	r3, [pc, #280]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b43      	ldr	r3, [pc, #268]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c0      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4939      	ldr	r1, [pc, #228]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc83 	bl	8001560 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fc7f 	bl	8001560 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4927      	ldr	r1, [pc, #156]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc62 	bl	8001560 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc5e 	bl	8001560 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e180      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03a      	beq.n	8001d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d019      	beq.n	8001d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fc42 	bl	8001560 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc3e 	bl	8001560 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e160      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 face 	bl	80022a0 <RCC_Delay>
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fc28 	bl	8001560 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff fc24 	bl	8001560 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d908      	bls.n	8001d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e146      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	42420000 	.word	0x42420000
 8001d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b92      	ldr	r3, [pc, #584]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e9      	bne.n	8001d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a6 	beq.w	8001e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b8b      	ldr	r3, [pc, #556]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10d      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a87      	ldr	r2, [pc, #540]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b85      	ldr	r3, [pc, #532]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b7f      	ldr	r3, [pc, #508]	@ (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fbe5 	bl	8001560 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff fbe1 	bl	8001560 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	@ 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e103      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b75      	ldr	r3, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x312>
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e02d      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x334>
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a69      	ldr	r2, [pc, #420]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b67      	ldr	r3, [pc, #412]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a66      	ldr	r2, [pc, #408]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	e01c      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x356>
 8001df8:	4b61      	ldr	r3, [pc, #388]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a60      	ldr	r2, [pc, #384]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	4b5e      	ldr	r3, [pc, #376]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a5d      	ldr	r2, [pc, #372]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001e12:	4b5b      	ldr	r3, [pc, #364]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a5a      	ldr	r2, [pc, #360]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b58      	ldr	r3, [pc, #352]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a57      	ldr	r2, [pc, #348]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb95 	bl	8001560 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb91 	bl	8001560 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0b1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b4b      	ldr	r3, [pc, #300]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x37e>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb7f 	bl	8001560 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb7b 	bl	8001560 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e09b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a3b      	ldr	r2, [pc, #236]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d061      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d146      	bne.n	8001f46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b33      	ldr	r3, [pc, #204]	@ (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb4f 	bl	8001560 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff fb4b 	bl	8001560 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e06d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4921      	ldr	r1, [pc, #132]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a19      	ldr	r1, [r3, #32]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	430b      	orrs	r3, r1
 8001f12:	491b      	ldr	r1, [pc, #108]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb1f 	bl	8001560 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb1b 	bl	8001560 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e03d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46a>
 8001f44:	e035      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fb08 	bl	8001560 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff fb04 	bl	8001560 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e026      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x498>
 8001f72:	e01e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e019      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
 8001f88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_RCC_OscConfig+0x500>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d0      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4965      	ldr	r1, [pc, #404]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a58      	ldr	r2, [pc, #352]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002026:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800203e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e073      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06b      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4936      	ldr	r1, [pc, #216]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7ff fa56 	bl	8001560 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff fa52 	bl	8001560 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e053      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d210      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4922      	ldr	r1, [pc, #136]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	@ (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x1cc>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_ClockConfig+0x1d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f9b4 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
 8002188:	08005c94 	.word	0x08005c94
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x30>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x36>
 80021c2:	e027      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	613b      	str	r3, [r7, #16]
      break;
 80021c8:	e027      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021e2:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0c5b      	lsrs	r3, r3, #17
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_RCC_GetSysClockFreq+0x98>)
 80021f6:	fb03 f202 	mul.w	r2, r3, r2
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e004      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	613b      	str	r3, [r7, #16]
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCC_GetSysClockFreq+0x98>)
 8002216:	613b      	str	r3, [r7, #16]
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	693b      	ldr	r3, [r7, #16]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	007a1200 	.word	0x007a1200
 8002230:	08005cac 	.word	0x08005cac
 8002234:	08005cbc 	.word	0x08005cbc
 8002238:	003d0900 	.word	0x003d0900

0800223c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002240:	4b02      	ldr	r3, [pc, #8]	@ (800224c <HAL_RCC_GetHCLKFreq+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000000 	.word	0x20000000

08002250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002254:	f7ff fff2 	bl	800223c <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4903      	ldr	r1, [pc, #12]	@ (8002274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	08005ca4 	.word	0x08005ca4

08002278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800227c:	f7ff ffde 	bl	800223c <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0adb      	lsrs	r3, r3, #11
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	@ (800229c <HAL_RCC_GetPCLK2Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	08005ca4 	.word	0x08005ca4

080022a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <RCC_Delay+0x34>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <RCC_Delay+0x38>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022bc:	bf00      	nop
  }
  while (Delay --);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f9      	bne.n	80022bc <RCC_Delay+0x1c>
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000000 	.word	0x20000000
 80022d8:	10624dd3 	.word	0x10624dd3

080022dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e076      	b.n	80023dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022fe:	d009      	beq.n	8002314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
 8002306:	e005      	b.n	8002314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe ff0e 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800234a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002398:	ea42 0103 	orr.w	r1, r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	0c1a      	lsrs	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f002 0204 	and.w	r2, r2, #4
 80023ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d001      	beq.n	8002404 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	e104      	b.n	800260e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800240c:	d112      	bne.n	8002434 <HAL_SPI_Receive+0x50>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10e      	bne.n	8002434 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2204      	movs	r2, #4
 800241a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f8f3 	bl	8002616 <HAL_SPI_TransmitReceive>
 8002430:	4603      	mov	r3, r0
 8002432:	e0ec      	b.n	800260e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002434:	f7ff f894 	bl	8001560 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_SPI_Receive+0x62>
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e1      	b.n	800260e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_SPI_Receive+0x74>
 8002454:	2302      	movs	r3, #2
 8002456:	e0da      	b.n	800260e <HAL_SPI_Receive+0x22a>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2204      	movs	r2, #4
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a6:	d10f      	bne.n	80024c8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	d007      	beq.n	80024e6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d170      	bne.n	80025d0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024ee:	e035      	b.n	800255c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d115      	bne.n	800252a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f103 020c 	add.w	r2, r3, #12
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002528:	e018      	b.n	800255c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252a:	f7ff f819 	bl	8001560 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <HAL_SPI_Receive+0x15e>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Receive+0x164>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e058      	b.n	800260e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1c4      	bne.n	80024f0 <HAL_SPI_Receive+0x10c>
 8002566:	e038      	b.n	80025da <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d113      	bne.n	800259e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002580:	b292      	uxth	r2, r2
 8002582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	1c9a      	adds	r2, r3, #2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800259c:	e018      	b.n	80025d0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259e:	f7fe ffdf 	bl	8001560 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_Receive+0x1d2>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_Receive+0x1d8>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e01e      	b.n	800260e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1c6      	bne.n	8002568 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fa4a 	bl	8002a78 <SPI_EndRxTransaction>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800260c:	2300      	movs	r3, #0
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	@ 0x28
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002624:	2301      	movs	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002628:	f7fe ff9a 	bl	8001560 <HAL_GetTick>
 800262c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002634:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800263c:	887b      	ldrh	r3, [r7, #2]
 800263e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002640:	7ffb      	ldrb	r3, [r7, #31]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00c      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x4a>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800264c:	d106      	bne.n	800265c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_SPI_TransmitReceive+0x46>
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d001      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	e17f      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x5c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_SPI_TransmitReceive+0x5c>
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e174      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_SPI_TransmitReceive+0x6e>
 8002680:	2302      	movs	r3, #2
 8002682:	e16d      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b04      	cmp	r3, #4
 8002696:	d003      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2205      	movs	r2, #5
 800269c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	887a      	ldrh	r2, [r7, #2]
 80026c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d007      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026fc:	d17e      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_SPI_TransmitReceive+0xf6>
 8002706:	8afb      	ldrh	r3, [r7, #22]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d16c      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002730:	e059      	b.n	80027e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11b      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x162>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x162>
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	2b01      	cmp	r3, #1
 800274e:	d113      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	1c9a      	adds	r2, r3, #2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d119      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x1a4>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d014      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279a:	b292      	uxth	r2, r2
 800279c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027b6:	2301      	movs	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027ba:	f7fe fed1 	bl	8001560 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d80d      	bhi.n	80027e6 <HAL_SPI_TransmitReceive+0x1d0>
 80027ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d0:	d009      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0bc      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1a0      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x11c>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d19b      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x11c>
 80027fa:	e082      	b.n	8002902 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_TransmitReceive+0x1f4>
 8002804:	8afb      	ldrh	r3, [r7, #22]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d171      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002830:	e05d      	b.n	80028ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d11c      	bne.n	800287a <HAL_SPI_TransmitReceive+0x264>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <HAL_SPI_TransmitReceive+0x264>
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	2b01      	cmp	r3, #1
 800284e:	d114      	bne.n	800287a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d119      	bne.n	80028bc <HAL_SPI_TransmitReceive+0x2a6>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028bc:	f7fe fe50 	bl	8001560 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d803      	bhi.n	80028d4 <HAL_SPI_TransmitReceive+0x2be>
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028d2:	d102      	bne.n	80028da <HAL_SPI_TransmitReceive+0x2c4>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e038      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d19c      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x21c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d197      	bne.n	8002832 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f908 	bl	8002b1c <SPI_EndRxTxTransaction>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01d      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800295e:	2300      	movs	r3, #0
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	@ 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002978:	f7fe fdf2 	bl	8001560 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4413      	add	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002988:	f7fe fdea 	bl	8001560 <HAL_GetTick>
 800298c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	0d1b      	lsrs	r3, r3, #20
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299e:	e054      	b.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029a6:	d050      	beq.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a8:	f7fe fdda 	bl	8001560 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d902      	bls.n	80029be <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d13d      	bne.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d6:	d111      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e0:	d004      	beq.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d107      	bne.n	80029fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a04:	d10f      	bne.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e017      	b.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d19b      	bne.n	80029a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a8c:	d111      	bne.n	8002ab2 <SPI_EndRxTransaction+0x3a>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a96:	d004      	beq.n	8002aa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa0:	d107      	bne.n	8002ab2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aba:	d117      	bne.n	8002aec <SPI_EndRxTransaction+0x74>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac4:	d112      	bne.n	8002aec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2101      	movs	r1, #1
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff49 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01a      	beq.n	8002b12 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff ff36 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e000      	b.n	8002b14 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2102      	movs	r1, #2
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff ff18 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0220 	orr.w	r2, r3, #32
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e013      	b.n	8002b76 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	@ 0x80
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f7ff ff05 	bl	8002968 <SPI_WaitFlagStateUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e000      	b.n	8002b76 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e042      	b.n	8002c16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe fb1d 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	@ 0x24
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f972 	bl	8002eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002be6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	@ 0x28
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d175      	bne.n	8002d2a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_UART_Transmit+0x2c>
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06e      	b.n	8002d2c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2221      	movs	r2, #33	@ 0x21
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fc80 	bl	8001560 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c76:	d108      	bne.n	8002c8a <HAL_UART_Transmit+0x6c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e003      	b.n	8002c92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c92:	e02e      	b.n	8002cf2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f848 	bl	8002d34 <UART_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e03a      	b.n	8002d2c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e007      	b.n	8002ce4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1cb      	bne.n	8002c94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2140      	movs	r1, #64	@ 0x40
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f814 	bl	8002d34 <UART_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e006      	b.n	8002d2c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d44:	e03b      	b.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d4c:	d037      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe fc07 	bl	8001560 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e03a      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d023      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b80      	cmp	r3, #128	@ 0x80
 8002d7a:	d020      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b40      	cmp	r3, #64	@ 0x40
 8002d80:	d01d      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d116      	bne.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f81d 	bl	8002de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2208      	movs	r2, #8
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d0b4      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b095      	sub	sp, #84	@ 0x54
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e5      	bne.n	8002dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3314      	adds	r3, #20
 8002e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e5      	bne.n	8002e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d119      	bne.n	8002e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0310 	bic.w	r3, r3, #16
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e7e:	61ba      	str	r2, [r7, #24]
 8002e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6979      	ldr	r1, [r7, #20]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e5      	bne.n	8002e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ea0:	bf00      	nop
 8002ea2:	3754      	adds	r7, #84	@ 0x54
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
	...

08002eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ee6:	f023 030c 	bic.w	r3, r3, #12
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <UART_SetConfig+0x114>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7ff f9b0 	bl	8002278 <HAL_RCC_GetPCLK2Freq>
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	e002      	b.n	8002f22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7ff f998 	bl	8002250 <HAL_RCC_GetPCLK1Freq>
 8002f20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009a      	lsls	r2, r3, #2
 8002f2c:	441a      	add	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <UART_SetConfig+0x118>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	0119      	lsls	r1, r3, #4
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f58:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <UART_SetConfig+0x118>)
 8002f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2064      	movs	r0, #100	@ 0x64
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	@ 0x32
 8002f6c:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <UART_SetConfig+0x118>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f78:	4419      	add	r1, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <UART_SetConfig+0x118>)
 8002f92:	fba3 0302 	umull	r0, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2064      	movs	r0, #100	@ 0x64
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	@ 0x32
 8002fa4:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <UART_SetConfig+0x118>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	51eb851f 	.word	0x51eb851f

08002fc8 <__cvt>:
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fce:	461d      	mov	r5, r3
 8002fd0:	bfbb      	ittet	lt
 8002fd2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002fd6:	461d      	movlt	r5, r3
 8002fd8:	2300      	movge	r3, #0
 8002fda:	232d      	movlt	r3, #45	@ 0x2d
 8002fdc:	b088      	sub	sp, #32
 8002fde:	4614      	mov	r4, r2
 8002fe0:	bfb8      	it	lt
 8002fe2:	4614      	movlt	r4, r2
 8002fe4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002fe6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002fe8:	7013      	strb	r3, [r2, #0]
 8002fea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002fec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ff0:	f023 0820 	bic.w	r8, r3, #32
 8002ff4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ff8:	d005      	beq.n	8003006 <__cvt+0x3e>
 8002ffa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ffe:	d100      	bne.n	8003002 <__cvt+0x3a>
 8003000:	3601      	adds	r6, #1
 8003002:	2302      	movs	r3, #2
 8003004:	e000      	b.n	8003008 <__cvt+0x40>
 8003006:	2303      	movs	r3, #3
 8003008:	aa07      	add	r2, sp, #28
 800300a:	9204      	str	r2, [sp, #16]
 800300c:	aa06      	add	r2, sp, #24
 800300e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003012:	e9cd 3600 	strd	r3, r6, [sp]
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	f000 fde5 	bl	8003be8 <_dtoa_r>
 800301e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003022:	4607      	mov	r7, r0
 8003024:	d119      	bne.n	800305a <__cvt+0x92>
 8003026:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003028:	07db      	lsls	r3, r3, #31
 800302a:	d50e      	bpl.n	800304a <__cvt+0x82>
 800302c:	eb00 0906 	add.w	r9, r0, r6
 8003030:	2200      	movs	r2, #0
 8003032:	2300      	movs	r3, #0
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd fd6a 	bl	8000b10 <__aeabi_dcmpeq>
 800303c:	b108      	cbz	r0, 8003042 <__cvt+0x7a>
 800303e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003042:	2230      	movs	r2, #48	@ 0x30
 8003044:	9b07      	ldr	r3, [sp, #28]
 8003046:	454b      	cmp	r3, r9
 8003048:	d31e      	bcc.n	8003088 <__cvt+0xc0>
 800304a:	4638      	mov	r0, r7
 800304c:	9b07      	ldr	r3, [sp, #28]
 800304e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003050:	1bdb      	subs	r3, r3, r7
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	b008      	add	sp, #32
 8003056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800305e:	eb00 0906 	add.w	r9, r0, r6
 8003062:	d1e5      	bne.n	8003030 <__cvt+0x68>
 8003064:	7803      	ldrb	r3, [r0, #0]
 8003066:	2b30      	cmp	r3, #48	@ 0x30
 8003068:	d10a      	bne.n	8003080 <__cvt+0xb8>
 800306a:	2200      	movs	r2, #0
 800306c:	2300      	movs	r3, #0
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd fd4d 	bl	8000b10 <__aeabi_dcmpeq>
 8003076:	b918      	cbnz	r0, 8003080 <__cvt+0xb8>
 8003078:	f1c6 0601 	rsb	r6, r6, #1
 800307c:	f8ca 6000 	str.w	r6, [sl]
 8003080:	f8da 3000 	ldr.w	r3, [sl]
 8003084:	4499      	add	r9, r3
 8003086:	e7d3      	b.n	8003030 <__cvt+0x68>
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	9107      	str	r1, [sp, #28]
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e7d9      	b.n	8003044 <__cvt+0x7c>

08003090 <__exponent>:
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003092:	2900      	cmp	r1, #0
 8003094:	bfb6      	itet	lt
 8003096:	232d      	movlt	r3, #45	@ 0x2d
 8003098:	232b      	movge	r3, #43	@ 0x2b
 800309a:	4249      	neglt	r1, r1
 800309c:	2909      	cmp	r1, #9
 800309e:	7002      	strb	r2, [r0, #0]
 80030a0:	7043      	strb	r3, [r0, #1]
 80030a2:	dd29      	ble.n	80030f8 <__exponent+0x68>
 80030a4:	f10d 0307 	add.w	r3, sp, #7
 80030a8:	461d      	mov	r5, r3
 80030aa:	270a      	movs	r7, #10
 80030ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80030b0:	461a      	mov	r2, r3
 80030b2:	fb07 1416 	mls	r4, r7, r6, r1
 80030b6:	3430      	adds	r4, #48	@ 0x30
 80030b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80030bc:	460c      	mov	r4, r1
 80030be:	2c63      	cmp	r4, #99	@ 0x63
 80030c0:	4631      	mov	r1, r6
 80030c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80030c6:	dcf1      	bgt.n	80030ac <__exponent+0x1c>
 80030c8:	3130      	adds	r1, #48	@ 0x30
 80030ca:	1e94      	subs	r4, r2, #2
 80030cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030d0:	4623      	mov	r3, r4
 80030d2:	1c41      	adds	r1, r0, #1
 80030d4:	42ab      	cmp	r3, r5
 80030d6:	d30a      	bcc.n	80030ee <__exponent+0x5e>
 80030d8:	f10d 0309 	add.w	r3, sp, #9
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	42ac      	cmp	r4, r5
 80030e0:	bf88      	it	hi
 80030e2:	2300      	movhi	r3, #0
 80030e4:	3302      	adds	r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	1a18      	subs	r0, r3, r0
 80030ea:	b003      	add	sp, #12
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80030f6:	e7ed      	b.n	80030d4 <__exponent+0x44>
 80030f8:	2330      	movs	r3, #48	@ 0x30
 80030fa:	3130      	adds	r1, #48	@ 0x30
 80030fc:	7083      	strb	r3, [r0, #2]
 80030fe:	70c1      	strb	r1, [r0, #3]
 8003100:	1d03      	adds	r3, r0, #4
 8003102:	e7f1      	b.n	80030e8 <__exponent+0x58>

08003104 <_printf_float>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	b091      	sub	sp, #68	@ 0x44
 800310a:	460c      	mov	r4, r1
 800310c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003110:	4616      	mov	r6, r2
 8003112:	461f      	mov	r7, r3
 8003114:	4605      	mov	r5, r0
 8003116:	f000 fc9d 	bl	8003a54 <_localeconv_r>
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	9308      	str	r3, [sp, #32]
 8003120:	f7fd f816 	bl	8000150 <strlen>
 8003124:	2300      	movs	r3, #0
 8003126:	930e      	str	r3, [sp, #56]	@ 0x38
 8003128:	f8d8 3000 	ldr.w	r3, [r8]
 800312c:	9009      	str	r0, [sp, #36]	@ 0x24
 800312e:	3307      	adds	r3, #7
 8003130:	f023 0307 	bic.w	r3, r3, #7
 8003134:	f103 0208 	add.w	r2, r3, #8
 8003138:	f894 a018 	ldrb.w	sl, [r4, #24]
 800313c:	f8d4 b000 	ldr.w	fp, [r4]
 8003140:	f8c8 2000 	str.w	r2, [r8]
 8003144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003148:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800314c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800314e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003152:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003156:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800315a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800315e:	4b9c      	ldr	r3, [pc, #624]	@ (80033d0 <_printf_float+0x2cc>)
 8003160:	f7fd fd08 	bl	8000b74 <__aeabi_dcmpun>
 8003164:	bb70      	cbnz	r0, 80031c4 <_printf_float+0xc0>
 8003166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800316a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800316e:	4b98      	ldr	r3, [pc, #608]	@ (80033d0 <_printf_float+0x2cc>)
 8003170:	f7fd fce2 	bl	8000b38 <__aeabi_dcmple>
 8003174:	bb30      	cbnz	r0, 80031c4 <_printf_float+0xc0>
 8003176:	2200      	movs	r2, #0
 8003178:	2300      	movs	r3, #0
 800317a:	4640      	mov	r0, r8
 800317c:	4649      	mov	r1, r9
 800317e:	f7fd fcd1 	bl	8000b24 <__aeabi_dcmplt>
 8003182:	b110      	cbz	r0, 800318a <_printf_float+0x86>
 8003184:	232d      	movs	r3, #45	@ 0x2d
 8003186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800318a:	4a92      	ldr	r2, [pc, #584]	@ (80033d4 <_printf_float+0x2d0>)
 800318c:	4b92      	ldr	r3, [pc, #584]	@ (80033d8 <_printf_float+0x2d4>)
 800318e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003192:	bf94      	ite	ls
 8003194:	4690      	movls	r8, r2
 8003196:	4698      	movhi	r8, r3
 8003198:	2303      	movs	r3, #3
 800319a:	f04f 0900 	mov.w	r9, #0
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	f02b 0304 	bic.w	r3, fp, #4
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	4633      	mov	r3, r6
 80031a8:	4621      	mov	r1, r4
 80031aa:	4628      	mov	r0, r5
 80031ac:	9700      	str	r7, [sp, #0]
 80031ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80031b0:	f000 f9d4 	bl	800355c <_printf_common>
 80031b4:	3001      	adds	r0, #1
 80031b6:	f040 8090 	bne.w	80032da <_printf_float+0x1d6>
 80031ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031be:	b011      	add	sp, #68	@ 0x44
 80031c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	4640      	mov	r0, r8
 80031ca:	4649      	mov	r1, r9
 80031cc:	f7fd fcd2 	bl	8000b74 <__aeabi_dcmpun>
 80031d0:	b148      	cbz	r0, 80031e6 <_printf_float+0xe2>
 80031d2:	464b      	mov	r3, r9
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bfb8      	it	lt
 80031d8:	232d      	movlt	r3, #45	@ 0x2d
 80031da:	4a80      	ldr	r2, [pc, #512]	@ (80033dc <_printf_float+0x2d8>)
 80031dc:	bfb8      	it	lt
 80031de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031e2:	4b7f      	ldr	r3, [pc, #508]	@ (80033e0 <_printf_float+0x2dc>)
 80031e4:	e7d3      	b.n	800318e <_printf_float+0x8a>
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	d13f      	bne.n	8003270 <_printf_float+0x16c>
 80031f0:	2306      	movs	r3, #6
 80031f2:	6063      	str	r3, [r4, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	9206      	str	r2, [sp, #24]
 80031fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8003200:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003204:	aa0d      	add	r2, sp, #52	@ 0x34
 8003206:	9203      	str	r2, [sp, #12]
 8003208:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800320c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	4642      	mov	r2, r8
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4628      	mov	r0, r5
 8003218:	464b      	mov	r3, r9
 800321a:	910a      	str	r1, [sp, #40]	@ 0x28
 800321c:	f7ff fed4 	bl	8002fc8 <__cvt>
 8003220:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003222:	4680      	mov	r8, r0
 8003224:	2947      	cmp	r1, #71	@ 0x47
 8003226:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003228:	d128      	bne.n	800327c <_printf_float+0x178>
 800322a:	1cc8      	adds	r0, r1, #3
 800322c:	db02      	blt.n	8003234 <_printf_float+0x130>
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	4299      	cmp	r1, r3
 8003232:	dd40      	ble.n	80032b6 <_printf_float+0x1b2>
 8003234:	f1aa 0a02 	sub.w	sl, sl, #2
 8003238:	fa5f fa8a 	uxtb.w	sl, sl
 800323c:	4652      	mov	r2, sl
 800323e:	3901      	subs	r1, #1
 8003240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003244:	910d      	str	r1, [sp, #52]	@ 0x34
 8003246:	f7ff ff23 	bl	8003090 <__exponent>
 800324a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800324c:	4681      	mov	r9, r0
 800324e:	1813      	adds	r3, r2, r0
 8003250:	2a01      	cmp	r2, #1
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	dc02      	bgt.n	800325c <_printf_float+0x158>
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	07d2      	lsls	r2, r2, #31
 800325a:	d501      	bpl.n	8003260 <_printf_float+0x15c>
 800325c:	3301      	adds	r3, #1
 800325e:	6123      	str	r3, [r4, #16]
 8003260:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003264:	2b00      	cmp	r3, #0
 8003266:	d09e      	beq.n	80031a6 <_printf_float+0xa2>
 8003268:	232d      	movs	r3, #45	@ 0x2d
 800326a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800326e:	e79a      	b.n	80031a6 <_printf_float+0xa2>
 8003270:	2947      	cmp	r1, #71	@ 0x47
 8003272:	d1bf      	bne.n	80031f4 <_printf_float+0xf0>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1bd      	bne.n	80031f4 <_printf_float+0xf0>
 8003278:	2301      	movs	r3, #1
 800327a:	e7ba      	b.n	80031f2 <_printf_float+0xee>
 800327c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003280:	d9dc      	bls.n	800323c <_printf_float+0x138>
 8003282:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003286:	d118      	bne.n	80032ba <_printf_float+0x1b6>
 8003288:	2900      	cmp	r1, #0
 800328a:	6863      	ldr	r3, [r4, #4]
 800328c:	dd0b      	ble.n	80032a6 <_printf_float+0x1a2>
 800328e:	6121      	str	r1, [r4, #16]
 8003290:	b913      	cbnz	r3, 8003298 <_printf_float+0x194>
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	07d0      	lsls	r0, r2, #31
 8003296:	d502      	bpl.n	800329e <_printf_float+0x19a>
 8003298:	3301      	adds	r3, #1
 800329a:	440b      	add	r3, r1
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	f04f 0900 	mov.w	r9, #0
 80032a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032a4:	e7dc      	b.n	8003260 <_printf_float+0x15c>
 80032a6:	b913      	cbnz	r3, 80032ae <_printf_float+0x1aa>
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	07d2      	lsls	r2, r2, #31
 80032ac:	d501      	bpl.n	80032b2 <_printf_float+0x1ae>
 80032ae:	3302      	adds	r3, #2
 80032b0:	e7f4      	b.n	800329c <_printf_float+0x198>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e7f2      	b.n	800329c <_printf_float+0x198>
 80032b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80032ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032bc:	4299      	cmp	r1, r3
 80032be:	db05      	blt.n	80032cc <_printf_float+0x1c8>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	6121      	str	r1, [r4, #16]
 80032c4:	07d8      	lsls	r0, r3, #31
 80032c6:	d5ea      	bpl.n	800329e <_printf_float+0x19a>
 80032c8:	1c4b      	adds	r3, r1, #1
 80032ca:	e7e7      	b.n	800329c <_printf_float+0x198>
 80032cc:	2900      	cmp	r1, #0
 80032ce:	bfcc      	ite	gt
 80032d0:	2201      	movgt	r2, #1
 80032d2:	f1c1 0202 	rsble	r2, r1, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	e7e0      	b.n	800329c <_printf_float+0x198>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	055a      	lsls	r2, r3, #21
 80032de:	d407      	bmi.n	80032f0 <_printf_float+0x1ec>
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	4642      	mov	r2, r8
 80032e4:	4631      	mov	r1, r6
 80032e6:	4628      	mov	r0, r5
 80032e8:	47b8      	blx	r7
 80032ea:	3001      	adds	r0, #1
 80032ec:	d12b      	bne.n	8003346 <_printf_float+0x242>
 80032ee:	e764      	b.n	80031ba <_printf_float+0xb6>
 80032f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032f4:	f240 80dc 	bls.w	80034b0 <_printf_float+0x3ac>
 80032f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032fc:	2200      	movs	r2, #0
 80032fe:	2300      	movs	r3, #0
 8003300:	f7fd fc06 	bl	8000b10 <__aeabi_dcmpeq>
 8003304:	2800      	cmp	r0, #0
 8003306:	d033      	beq.n	8003370 <_printf_float+0x26c>
 8003308:	2301      	movs	r3, #1
 800330a:	4631      	mov	r1, r6
 800330c:	4628      	mov	r0, r5
 800330e:	4a35      	ldr	r2, [pc, #212]	@ (80033e4 <_printf_float+0x2e0>)
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f af51 	beq.w	80031ba <_printf_float+0xb6>
 8003318:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800331c:	4543      	cmp	r3, r8
 800331e:	db02      	blt.n	8003326 <_printf_float+0x222>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	07d8      	lsls	r0, r3, #31
 8003324:	d50f      	bpl.n	8003346 <_printf_float+0x242>
 8003326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	f43f af42 	beq.w	80031ba <_printf_float+0xb6>
 8003336:	f04f 0900 	mov.w	r9, #0
 800333a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800333e:	f104 0a1a 	add.w	sl, r4, #26
 8003342:	45c8      	cmp	r8, r9
 8003344:	dc09      	bgt.n	800335a <_printf_float+0x256>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	079b      	lsls	r3, r3, #30
 800334a:	f100 8102 	bmi.w	8003552 <_printf_float+0x44e>
 800334e:	68e0      	ldr	r0, [r4, #12]
 8003350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003352:	4298      	cmp	r0, r3
 8003354:	bfb8      	it	lt
 8003356:	4618      	movlt	r0, r3
 8003358:	e731      	b.n	80031be <_printf_float+0xba>
 800335a:	2301      	movs	r3, #1
 800335c:	4652      	mov	r2, sl
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	f43f af28 	beq.w	80031ba <_printf_float+0xb6>
 800336a:	f109 0901 	add.w	r9, r9, #1
 800336e:	e7e8      	b.n	8003342 <_printf_float+0x23e>
 8003370:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003372:	2b00      	cmp	r3, #0
 8003374:	dc38      	bgt.n	80033e8 <_printf_float+0x2e4>
 8003376:	2301      	movs	r3, #1
 8003378:	4631      	mov	r1, r6
 800337a:	4628      	mov	r0, r5
 800337c:	4a19      	ldr	r2, [pc, #100]	@ (80033e4 <_printf_float+0x2e0>)
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	f43f af1a 	beq.w	80031ba <_printf_float+0xb6>
 8003386:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800338a:	ea59 0303 	orrs.w	r3, r9, r3
 800338e:	d102      	bne.n	8003396 <_printf_float+0x292>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	07d9      	lsls	r1, r3, #31
 8003394:	d5d7      	bpl.n	8003346 <_printf_float+0x242>
 8003396:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800339a:	4631      	mov	r1, r6
 800339c:	4628      	mov	r0, r5
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	f43f af0a 	beq.w	80031ba <_printf_float+0xb6>
 80033a6:	f04f 0a00 	mov.w	sl, #0
 80033aa:	f104 0b1a 	add.w	fp, r4, #26
 80033ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033b0:	425b      	negs	r3, r3
 80033b2:	4553      	cmp	r3, sl
 80033b4:	dc01      	bgt.n	80033ba <_printf_float+0x2b6>
 80033b6:	464b      	mov	r3, r9
 80033b8:	e793      	b.n	80032e2 <_printf_float+0x1de>
 80033ba:	2301      	movs	r3, #1
 80033bc:	465a      	mov	r2, fp
 80033be:	4631      	mov	r1, r6
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b8      	blx	r7
 80033c4:	3001      	adds	r0, #1
 80033c6:	f43f aef8 	beq.w	80031ba <_printf_float+0xb6>
 80033ca:	f10a 0a01 	add.w	sl, sl, #1
 80033ce:	e7ee      	b.n	80033ae <_printf_float+0x2aa>
 80033d0:	7fefffff 	.word	0x7fefffff
 80033d4:	08005cbe 	.word	0x08005cbe
 80033d8:	08005cc2 	.word	0x08005cc2
 80033dc:	08005cc6 	.word	0x08005cc6
 80033e0:	08005cca 	.word	0x08005cca
 80033e4:	08005cce 	.word	0x08005cce
 80033e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80033ee:	4553      	cmp	r3, sl
 80033f0:	bfa8      	it	ge
 80033f2:	4653      	movge	r3, sl
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	4699      	mov	r9, r3
 80033f8:	dc36      	bgt.n	8003468 <_printf_float+0x364>
 80033fa:	f04f 0b00 	mov.w	fp, #0
 80033fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003402:	f104 021a 	add.w	r2, r4, #26
 8003406:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003408:	930a      	str	r3, [sp, #40]	@ 0x28
 800340a:	eba3 0309 	sub.w	r3, r3, r9
 800340e:	455b      	cmp	r3, fp
 8003410:	dc31      	bgt.n	8003476 <_printf_float+0x372>
 8003412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003414:	459a      	cmp	sl, r3
 8003416:	dc3a      	bgt.n	800348e <_printf_float+0x38a>
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	d437      	bmi.n	800348e <_printf_float+0x38a>
 800341e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003420:	ebaa 0903 	sub.w	r9, sl, r3
 8003424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003426:	ebaa 0303 	sub.w	r3, sl, r3
 800342a:	4599      	cmp	r9, r3
 800342c:	bfa8      	it	ge
 800342e:	4699      	movge	r9, r3
 8003430:	f1b9 0f00 	cmp.w	r9, #0
 8003434:	dc33      	bgt.n	800349e <_printf_float+0x39a>
 8003436:	f04f 0800 	mov.w	r8, #0
 800343a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800343e:	f104 0b1a 	add.w	fp, r4, #26
 8003442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003444:	ebaa 0303 	sub.w	r3, sl, r3
 8003448:	eba3 0309 	sub.w	r3, r3, r9
 800344c:	4543      	cmp	r3, r8
 800344e:	f77f af7a 	ble.w	8003346 <_printf_float+0x242>
 8003452:	2301      	movs	r3, #1
 8003454:	465a      	mov	r2, fp
 8003456:	4631      	mov	r1, r6
 8003458:	4628      	mov	r0, r5
 800345a:	47b8      	blx	r7
 800345c:	3001      	adds	r0, #1
 800345e:	f43f aeac 	beq.w	80031ba <_printf_float+0xb6>
 8003462:	f108 0801 	add.w	r8, r8, #1
 8003466:	e7ec      	b.n	8003442 <_printf_float+0x33e>
 8003468:	4642      	mov	r2, r8
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	d1c2      	bne.n	80033fa <_printf_float+0x2f6>
 8003474:	e6a1      	b.n	80031ba <_printf_float+0xb6>
 8003476:	2301      	movs	r3, #1
 8003478:	4631      	mov	r1, r6
 800347a:	4628      	mov	r0, r5
 800347c:	920a      	str	r2, [sp, #40]	@ 0x28
 800347e:	47b8      	blx	r7
 8003480:	3001      	adds	r0, #1
 8003482:	f43f ae9a 	beq.w	80031ba <_printf_float+0xb6>
 8003486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003488:	f10b 0b01 	add.w	fp, fp, #1
 800348c:	e7bb      	b.n	8003406 <_printf_float+0x302>
 800348e:	4631      	mov	r1, r6
 8003490:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	d1c0      	bne.n	800341e <_printf_float+0x31a>
 800349c:	e68d      	b.n	80031ba <_printf_float+0xb6>
 800349e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034a0:	464b      	mov	r3, r9
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	4442      	add	r2, r8
 80034a8:	47b8      	blx	r7
 80034aa:	3001      	adds	r0, #1
 80034ac:	d1c3      	bne.n	8003436 <_printf_float+0x332>
 80034ae:	e684      	b.n	80031ba <_printf_float+0xb6>
 80034b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034b4:	f1ba 0f01 	cmp.w	sl, #1
 80034b8:	dc01      	bgt.n	80034be <_printf_float+0x3ba>
 80034ba:	07db      	lsls	r3, r3, #31
 80034bc:	d536      	bpl.n	800352c <_printf_float+0x428>
 80034be:	2301      	movs	r3, #1
 80034c0:	4642      	mov	r2, r8
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b8      	blx	r7
 80034c8:	3001      	adds	r0, #1
 80034ca:	f43f ae76 	beq.w	80031ba <_printf_float+0xb6>
 80034ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034d2:	4631      	mov	r1, r6
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b8      	blx	r7
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f ae6e 	beq.w	80031ba <_printf_float+0xb6>
 80034de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034e2:	2200      	movs	r2, #0
 80034e4:	2300      	movs	r3, #0
 80034e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80034ea:	f7fd fb11 	bl	8000b10 <__aeabi_dcmpeq>
 80034ee:	b9c0      	cbnz	r0, 8003522 <_printf_float+0x41e>
 80034f0:	4653      	mov	r3, sl
 80034f2:	f108 0201 	add.w	r2, r8, #1
 80034f6:	4631      	mov	r1, r6
 80034f8:	4628      	mov	r0, r5
 80034fa:	47b8      	blx	r7
 80034fc:	3001      	adds	r0, #1
 80034fe:	d10c      	bne.n	800351a <_printf_float+0x416>
 8003500:	e65b      	b.n	80031ba <_printf_float+0xb6>
 8003502:	2301      	movs	r3, #1
 8003504:	465a      	mov	r2, fp
 8003506:	4631      	mov	r1, r6
 8003508:	4628      	mov	r0, r5
 800350a:	47b8      	blx	r7
 800350c:	3001      	adds	r0, #1
 800350e:	f43f ae54 	beq.w	80031ba <_printf_float+0xb6>
 8003512:	f108 0801 	add.w	r8, r8, #1
 8003516:	45d0      	cmp	r8, sl
 8003518:	dbf3      	blt.n	8003502 <_printf_float+0x3fe>
 800351a:	464b      	mov	r3, r9
 800351c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003520:	e6e0      	b.n	80032e4 <_printf_float+0x1e0>
 8003522:	f04f 0800 	mov.w	r8, #0
 8003526:	f104 0b1a 	add.w	fp, r4, #26
 800352a:	e7f4      	b.n	8003516 <_printf_float+0x412>
 800352c:	2301      	movs	r3, #1
 800352e:	4642      	mov	r2, r8
 8003530:	e7e1      	b.n	80034f6 <_printf_float+0x3f2>
 8003532:	2301      	movs	r3, #1
 8003534:	464a      	mov	r2, r9
 8003536:	4631      	mov	r1, r6
 8003538:	4628      	mov	r0, r5
 800353a:	47b8      	blx	r7
 800353c:	3001      	adds	r0, #1
 800353e:	f43f ae3c 	beq.w	80031ba <_printf_float+0xb6>
 8003542:	f108 0801 	add.w	r8, r8, #1
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800354a:	1a5b      	subs	r3, r3, r1
 800354c:	4543      	cmp	r3, r8
 800354e:	dcf0      	bgt.n	8003532 <_printf_float+0x42e>
 8003550:	e6fd      	b.n	800334e <_printf_float+0x24a>
 8003552:	f04f 0800 	mov.w	r8, #0
 8003556:	f104 0919 	add.w	r9, r4, #25
 800355a:	e7f4      	b.n	8003546 <_printf_float+0x442>

0800355c <_printf_common>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	4616      	mov	r6, r2
 8003562:	4698      	mov	r8, r3
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4607      	mov	r7, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	bfb8      	it	lt
 800356e:	4613      	movlt	r3, r2
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003576:	460c      	mov	r4, r1
 8003578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800357c:	b10a      	cbz	r2, 8003582 <_printf_common+0x26>
 800357e:	3301      	adds	r3, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	0699      	lsls	r1, r3, #26
 8003586:	bf42      	ittt	mi
 8003588:	6833      	ldrmi	r3, [r6, #0]
 800358a:	3302      	addmi	r3, #2
 800358c:	6033      	strmi	r3, [r6, #0]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d106      	bne.n	80035a4 <_printf_common+0x48>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	6832      	ldr	r2, [r6, #0]
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	dc2b      	bgt.n	80035fc <_printf_common+0xa0>
 80035a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	3b00      	subs	r3, #0
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	0692      	lsls	r2, r2, #26
 80035b2:	d430      	bmi.n	8003616 <_printf_common+0xba>
 80035b4:	4641      	mov	r1, r8
 80035b6:	4638      	mov	r0, r7
 80035b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035bc:	47c8      	blx	r9
 80035be:	3001      	adds	r0, #1
 80035c0:	d023      	beq.n	800360a <_printf_common+0xae>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf14      	ite	ne
 80035ce:	2500      	movne	r5, #0
 80035d0:	6833      	ldreq	r3, [r6, #0]
 80035d2:	f04f 0600 	mov.w	r6, #0
 80035d6:	bf08      	it	eq
 80035d8:	68e5      	ldreq	r5, [r4, #12]
 80035da:	f104 041a 	add.w	r4, r4, #26
 80035de:	bf08      	it	eq
 80035e0:	1aed      	subeq	r5, r5, r3
 80035e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035e6:	bf08      	it	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfc4      	itt	gt
 80035f0:	1a9b      	subgt	r3, r3, r2
 80035f2:	18ed      	addgt	r5, r5, r3
 80035f4:	42b5      	cmp	r5, r6
 80035f6:	d11a      	bne.n	800362e <_printf_common+0xd2>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e008      	b.n	800360e <_printf_common+0xb2>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4652      	mov	r2, sl
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d103      	bne.n	8003612 <_printf_common+0xb6>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003612:	3501      	adds	r5, #1
 8003614:	e7c1      	b.n	800359a <_printf_common+0x3e>
 8003616:	2030      	movs	r0, #48	@ 0x30
 8003618:	18e1      	adds	r1, r4, r3
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003624:	4422      	add	r2, r4
 8003626:	3302      	adds	r3, #2
 8003628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800362c:	e7c2      	b.n	80035b4 <_printf_common+0x58>
 800362e:	2301      	movs	r3, #1
 8003630:	4622      	mov	r2, r4
 8003632:	4641      	mov	r1, r8
 8003634:	4638      	mov	r0, r7
 8003636:	47c8      	blx	r9
 8003638:	3001      	adds	r0, #1
 800363a:	d0e6      	beq.n	800360a <_printf_common+0xae>
 800363c:	3601      	adds	r6, #1
 800363e:	e7d9      	b.n	80035f4 <_printf_common+0x98>

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	4691      	mov	r9, r2
 8003648:	2f78      	cmp	r7, #120	@ 0x78
 800364a:	4680      	mov	r8, r0
 800364c:	460c      	mov	r4, r1
 800364e:	469a      	mov	sl, r3
 8003650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	@ 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d3 	beq.w	8003808 <_printf_i+0x1c8>
 8003662:	2f58      	cmp	r7, #88	@ 0x58
 8003664:	f000 80ba 	beq.w	80037dc <_printf_i+0x19c>
 8003668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	@ (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037ef 	.word	0x080037ef
 80036b0:	08003717 	.word	0x08003717
 80036b4:	080037a9 	.word	0x080037a9
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	08003811 	.word	0x08003811
 80036c4:	08003669 	.word	0x08003669
 80036c8:	08003717 	.word	0x08003717
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037b1 	.word	0x080037b1
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6032      	str	r2, [r6, #0]
 80036e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e09e      	b.n	800382a <_printf_i+0x1ea>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	6031      	str	r1, [r6, #0]
 80036f4:	0606      	lsls	r6, r0, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xbc>
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	e003      	b.n	8003704 <_printf_i+0xc4>
 80036fc:	0645      	lsls	r5, r0, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xb8>
 8003700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003704:	2d00      	cmp	r5, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xd0>
 8003708:	232d      	movs	r3, #45	@ 0x2d
 800370a:	426d      	negs	r5, r5
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003710:	230a      	movs	r3, #10
 8003712:	4859      	ldr	r0, [pc, #356]	@ (8003878 <_printf_i+0x238>)
 8003714:	e011      	b.n	800373a <_printf_i+0xfa>
 8003716:	6821      	ldr	r1, [r4, #0]
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	0608      	lsls	r0, r1, #24
 800371c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003720:	d402      	bmi.n	8003728 <_printf_i+0xe8>
 8003722:	0649      	lsls	r1, r1, #25
 8003724:	bf48      	it	mi
 8003726:	b2ad      	uxthmi	r5, r5
 8003728:	2f6f      	cmp	r7, #111	@ 0x6f
 800372a:	6033      	str	r3, [r6, #0]
 800372c:	bf14      	ite	ne
 800372e:	230a      	movne	r3, #10
 8003730:	2308      	moveq	r3, #8
 8003732:	4851      	ldr	r0, [pc, #324]	@ (8003878 <_printf_i+0x238>)
 8003734:	2100      	movs	r1, #0
 8003736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800373a:	6866      	ldr	r6, [r4, #4]
 800373c:	2e00      	cmp	r6, #0
 800373e:	bfa8      	it	ge
 8003740:	6821      	ldrge	r1, [r4, #0]
 8003742:	60a6      	str	r6, [r4, #8]
 8003744:	bfa4      	itt	ge
 8003746:	f021 0104 	bicge.w	r1, r1, #4
 800374a:	6021      	strge	r1, [r4, #0]
 800374c:	b90d      	cbnz	r5, 8003752 <_printf_i+0x112>
 800374e:	2e00      	cmp	r6, #0
 8003750:	d04b      	beq.n	80037ea <_printf_i+0x1aa>
 8003752:	4616      	mov	r6, r2
 8003754:	fbb5 f1f3 	udiv	r1, r5, r3
 8003758:	fb03 5711 	mls	r7, r3, r1, r5
 800375c:	5dc7      	ldrb	r7, [r0, r7]
 800375e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003762:	462f      	mov	r7, r5
 8003764:	42bb      	cmp	r3, r7
 8003766:	460d      	mov	r5, r1
 8003768:	d9f4      	bls.n	8003754 <_printf_i+0x114>
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10b      	bne.n	8003786 <_printf_i+0x146>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	07df      	lsls	r7, r3, #31
 8003772:	d508      	bpl.n	8003786 <_printf_i+0x146>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	6861      	ldr	r1, [r4, #4]
 8003778:	4299      	cmp	r1, r3
 800377a:	bfde      	ittt	le
 800377c:	2330      	movle	r3, #48	@ 0x30
 800377e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003782:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003786:	1b92      	subs	r2, r2, r6
 8003788:	6122      	str	r2, [r4, #16]
 800378a:	464b      	mov	r3, r9
 800378c:	4621      	mov	r1, r4
 800378e:	4640      	mov	r0, r8
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	aa03      	add	r2, sp, #12
 8003796:	f7ff fee1 	bl	800355c <_printf_common>
 800379a:	3001      	adds	r0, #1
 800379c:	d14a      	bne.n	8003834 <_printf_i+0x1f4>
 800379e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037a2:	b004      	add	sp, #16
 80037a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2778      	movs	r7, #120	@ 0x78
 80037b2:	4832      	ldr	r0, [pc, #200]	@ (800387c <_printf_i+0x23c>)
 80037b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	6831      	ldr	r1, [r6, #0]
 80037bc:	061f      	lsls	r7, r3, #24
 80037be:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c2:	d402      	bmi.n	80037ca <_printf_i+0x18a>
 80037c4:	065f      	lsls	r7, r3, #25
 80037c6:	bf48      	it	mi
 80037c8:	b2ad      	uxthmi	r5, r5
 80037ca:	6031      	str	r1, [r6, #0]
 80037cc:	07d9      	lsls	r1, r3, #31
 80037ce:	bf44      	itt	mi
 80037d0:	f043 0320 	orrmi.w	r3, r3, #32
 80037d4:	6023      	strmi	r3, [r4, #0]
 80037d6:	b11d      	cbz	r5, 80037e0 <_printf_i+0x1a0>
 80037d8:	2310      	movs	r3, #16
 80037da:	e7ab      	b.n	8003734 <_printf_i+0xf4>
 80037dc:	4826      	ldr	r0, [pc, #152]	@ (8003878 <_printf_i+0x238>)
 80037de:	e7e9      	b.n	80037b4 <_printf_i+0x174>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	e7f6      	b.n	80037d8 <_printf_i+0x198>
 80037ea:	4616      	mov	r6, r2
 80037ec:	e7bd      	b.n	800376a <_printf_i+0x12a>
 80037ee:	6833      	ldr	r3, [r6, #0]
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	1d18      	adds	r0, r3, #4
 80037f4:	6961      	ldr	r1, [r4, #20]
 80037f6:	6030      	str	r0, [r6, #0]
 80037f8:	062e      	lsls	r6, r5, #24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	d501      	bpl.n	8003802 <_printf_i+0x1c2>
 80037fe:	6019      	str	r1, [r3, #0]
 8003800:	e002      	b.n	8003808 <_printf_i+0x1c8>
 8003802:	0668      	lsls	r0, r5, #25
 8003804:	d5fb      	bpl.n	80037fe <_printf_i+0x1be>
 8003806:	8019      	strh	r1, [r3, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	4616      	mov	r6, r2
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	e7bc      	b.n	800378a <_printf_i+0x14a>
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	2100      	movs	r1, #0
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	6032      	str	r2, [r6, #0]
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f94a 	bl	8003ab6 <memchr>
 8003822:	b108      	cbz	r0, 8003828 <_printf_i+0x1e8>
 8003824:	1b80      	subs	r0, r0, r6
 8003826:	6060      	str	r0, [r4, #4]
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	2300      	movs	r3, #0
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003832:	e7aa      	b.n	800378a <_printf_i+0x14a>
 8003834:	4632      	mov	r2, r6
 8003836:	4649      	mov	r1, r9
 8003838:	4640      	mov	r0, r8
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	47d0      	blx	sl
 800383e:	3001      	adds	r0, #1
 8003840:	d0ad      	beq.n	800379e <_printf_i+0x15e>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	079b      	lsls	r3, r3, #30
 8003846:	d413      	bmi.n	8003870 <_printf_i+0x230>
 8003848:	68e0      	ldr	r0, [r4, #12]
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	4298      	cmp	r0, r3
 800384e:	bfb8      	it	lt
 8003850:	4618      	movlt	r0, r3
 8003852:	e7a6      	b.n	80037a2 <_printf_i+0x162>
 8003854:	2301      	movs	r3, #1
 8003856:	4632      	mov	r2, r6
 8003858:	4649      	mov	r1, r9
 800385a:	4640      	mov	r0, r8
 800385c:	47d0      	blx	sl
 800385e:	3001      	adds	r0, #1
 8003860:	d09d      	beq.n	800379e <_printf_i+0x15e>
 8003862:	3501      	adds	r5, #1
 8003864:	68e3      	ldr	r3, [r4, #12]
 8003866:	9903      	ldr	r1, [sp, #12]
 8003868:	1a5b      	subs	r3, r3, r1
 800386a:	42ab      	cmp	r3, r5
 800386c:	dcf2      	bgt.n	8003854 <_printf_i+0x214>
 800386e:	e7eb      	b.n	8003848 <_printf_i+0x208>
 8003870:	2500      	movs	r5, #0
 8003872:	f104 0619 	add.w	r6, r4, #25
 8003876:	e7f5      	b.n	8003864 <_printf_i+0x224>
 8003878:	08005cd0 	.word	0x08005cd0
 800387c:	08005ce1 	.word	0x08005ce1

08003880 <siprintf>:
 8003880:	b40e      	push	{r1, r2, r3}
 8003882:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003886:	b500      	push	{lr}
 8003888:	b09c      	sub	sp, #112	@ 0x70
 800388a:	ab1d      	add	r3, sp, #116	@ 0x74
 800388c:	9002      	str	r0, [sp, #8]
 800388e:	9006      	str	r0, [sp, #24]
 8003890:	9107      	str	r1, [sp, #28]
 8003892:	9104      	str	r1, [sp, #16]
 8003894:	4808      	ldr	r0, [pc, #32]	@ (80038b8 <siprintf+0x38>)
 8003896:	4909      	ldr	r1, [pc, #36]	@ (80038bc <siprintf+0x3c>)
 8003898:	f853 2b04 	ldr.w	r2, [r3], #4
 800389c:	9105      	str	r1, [sp, #20]
 800389e:	6800      	ldr	r0, [r0, #0]
 80038a0:	a902      	add	r1, sp, #8
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	f000 ffc4 	bl	8004830 <_svfiprintf_r>
 80038a8:	2200      	movs	r2, #0
 80038aa:	9b02      	ldr	r3, [sp, #8]
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	b01c      	add	sp, #112	@ 0x70
 80038b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038b4:	b003      	add	sp, #12
 80038b6:	4770      	bx	lr
 80038b8:	20000018 	.word	0x20000018
 80038bc:	ffff0208 	.word	0xffff0208

080038c0 <std>:
 80038c0:	2300      	movs	r3, #0
 80038c2:	b510      	push	{r4, lr}
 80038c4:	4604      	mov	r4, r0
 80038c6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ce:	6083      	str	r3, [r0, #8]
 80038d0:	8181      	strh	r1, [r0, #12]
 80038d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80038d4:	81c2      	strh	r2, [r0, #14]
 80038d6:	6183      	str	r3, [r0, #24]
 80038d8:	4619      	mov	r1, r3
 80038da:	2208      	movs	r2, #8
 80038dc:	305c      	adds	r0, #92	@ 0x5c
 80038de:	f000 f8b1 	bl	8003a44 <memset>
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <std+0x58>)
 80038e4:	6224      	str	r4, [r4, #32]
 80038e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <std+0x5c>)
 80038ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <std+0x60>)
 80038ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <std+0x64>)
 80038f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <std+0x68>)
 80038f6:	429c      	cmp	r4, r3
 80038f8:	d006      	beq.n	8003908 <std+0x48>
 80038fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038fe:	4294      	cmp	r4, r2
 8003900:	d002      	beq.n	8003908 <std+0x48>
 8003902:	33d0      	adds	r3, #208	@ 0xd0
 8003904:	429c      	cmp	r4, r3
 8003906:	d105      	bne.n	8003914 <std+0x54>
 8003908:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800390c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003910:	f000 b8ce 	b.w	8003ab0 <__retarget_lock_init_recursive>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	bf00      	nop
 8003918:	080053e5 	.word	0x080053e5
 800391c:	08005407 	.word	0x08005407
 8003920:	0800543f 	.word	0x0800543f
 8003924:	08005463 	.word	0x08005463
 8003928:	200002c0 	.word	0x200002c0

0800392c <stdio_exit_handler>:
 800392c:	4a02      	ldr	r2, [pc, #8]	@ (8003938 <stdio_exit_handler+0xc>)
 800392e:	4903      	ldr	r1, [pc, #12]	@ (800393c <stdio_exit_handler+0x10>)
 8003930:	4803      	ldr	r0, [pc, #12]	@ (8003940 <stdio_exit_handler+0x14>)
 8003932:	f000 b869 	b.w	8003a08 <_fwalk_sglue>
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c
 800393c:	08004c7d 	.word	0x08004c7d
 8003940:	2000001c 	.word	0x2000001c

08003944 <cleanup_stdio>:
 8003944:	6841      	ldr	r1, [r0, #4]
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <cleanup_stdio+0x34>)
 8003948:	b510      	push	{r4, lr}
 800394a:	4299      	cmp	r1, r3
 800394c:	4604      	mov	r4, r0
 800394e:	d001      	beq.n	8003954 <cleanup_stdio+0x10>
 8003950:	f001 f994 	bl	8004c7c <_fflush_r>
 8003954:	68a1      	ldr	r1, [r4, #8]
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <cleanup_stdio+0x38>)
 8003958:	4299      	cmp	r1, r3
 800395a:	d002      	beq.n	8003962 <cleanup_stdio+0x1e>
 800395c:	4620      	mov	r0, r4
 800395e:	f001 f98d 	bl	8004c7c <_fflush_r>
 8003962:	68e1      	ldr	r1, [r4, #12]
 8003964:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <cleanup_stdio+0x3c>)
 8003966:	4299      	cmp	r1, r3
 8003968:	d004      	beq.n	8003974 <cleanup_stdio+0x30>
 800396a:	4620      	mov	r0, r4
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f001 b984 	b.w	8004c7c <_fflush_r>
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop
 8003978:	200002c0 	.word	0x200002c0
 800397c:	20000328 	.word	0x20000328
 8003980:	20000390 	.word	0x20000390

08003984 <global_stdio_init.part.0>:
 8003984:	b510      	push	{r4, lr}
 8003986:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <global_stdio_init.part.0+0x30>)
 8003988:	4c0b      	ldr	r4, [pc, #44]	@ (80039b8 <global_stdio_init.part.0+0x34>)
 800398a:	4a0c      	ldr	r2, [pc, #48]	@ (80039bc <global_stdio_init.part.0+0x38>)
 800398c:	4620      	mov	r0, r4
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	2104      	movs	r1, #4
 8003992:	2200      	movs	r2, #0
 8003994:	f7ff ff94 	bl	80038c0 <std>
 8003998:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800399c:	2201      	movs	r2, #1
 800399e:	2109      	movs	r1, #9
 80039a0:	f7ff ff8e 	bl	80038c0 <std>
 80039a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039a8:	2202      	movs	r2, #2
 80039aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ae:	2112      	movs	r1, #18
 80039b0:	f7ff bf86 	b.w	80038c0 <std>
 80039b4:	200003f8 	.word	0x200003f8
 80039b8:	200002c0 	.word	0x200002c0
 80039bc:	0800392d 	.word	0x0800392d

080039c0 <__sfp_lock_acquire>:
 80039c0:	4801      	ldr	r0, [pc, #4]	@ (80039c8 <__sfp_lock_acquire+0x8>)
 80039c2:	f000 b876 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	200003fd 	.word	0x200003fd

080039cc <__sfp_lock_release>:
 80039cc:	4801      	ldr	r0, [pc, #4]	@ (80039d4 <__sfp_lock_release+0x8>)
 80039ce:	f000 b871 	b.w	8003ab4 <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	200003fd 	.word	0x200003fd

080039d8 <__sinit>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	4604      	mov	r4, r0
 80039dc:	f7ff fff0 	bl	80039c0 <__sfp_lock_acquire>
 80039e0:	6a23      	ldr	r3, [r4, #32]
 80039e2:	b11b      	cbz	r3, 80039ec <__sinit+0x14>
 80039e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e8:	f7ff bff0 	b.w	80039cc <__sfp_lock_release>
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <__sinit+0x28>)
 80039ee:	6223      	str	r3, [r4, #32]
 80039f0:	4b04      	ldr	r3, [pc, #16]	@ (8003a04 <__sinit+0x2c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f5      	bne.n	80039e4 <__sinit+0xc>
 80039f8:	f7ff ffc4 	bl	8003984 <global_stdio_init.part.0>
 80039fc:	e7f2      	b.n	80039e4 <__sinit+0xc>
 80039fe:	bf00      	nop
 8003a00:	08003945 	.word	0x08003945
 8003a04:	200003f8 	.word	0x200003f8

08003a08 <_fwalk_sglue>:
 8003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	4688      	mov	r8, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	2600      	movs	r6, #0
 8003a14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a18:	f1b9 0901 	subs.w	r9, r9, #1
 8003a1c:	d505      	bpl.n	8003a2a <_fwalk_sglue+0x22>
 8003a1e:	6824      	ldr	r4, [r4, #0]
 8003a20:	2c00      	cmp	r4, #0
 8003a22:	d1f7      	bne.n	8003a14 <_fwalk_sglue+0xc>
 8003a24:	4630      	mov	r0, r6
 8003a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d907      	bls.n	8003a40 <_fwalk_sglue+0x38>
 8003a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a34:	3301      	adds	r3, #1
 8003a36:	d003      	beq.n	8003a40 <_fwalk_sglue+0x38>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c0      	blx	r8
 8003a3e:	4306      	orrs	r6, r0
 8003a40:	3568      	adds	r5, #104	@ 0x68
 8003a42:	e7e9      	b.n	8003a18 <_fwalk_sglue+0x10>

08003a44 <memset>:
 8003a44:	4603      	mov	r3, r0
 8003a46:	4402      	add	r2, r0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d100      	bne.n	8003a4e <memset+0xa>
 8003a4c:	4770      	bx	lr
 8003a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a52:	e7f9      	b.n	8003a48 <memset+0x4>

08003a54 <_localeconv_r>:
 8003a54:	4800      	ldr	r0, [pc, #0]	@ (8003a58 <_localeconv_r+0x4>)
 8003a56:	4770      	bx	lr
 8003a58:	20000158 	.word	0x20000158

08003a5c <__errno>:
 8003a5c:	4b01      	ldr	r3, [pc, #4]	@ (8003a64 <__errno+0x8>)
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000018 	.word	0x20000018

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	4d0c      	ldr	r5, [pc, #48]	@ (8003aa0 <__libc_init_array+0x38>)
 8003a6e:	4c0d      	ldr	r4, [pc, #52]	@ (8003aa4 <__libc_init_array+0x3c>)
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	f002 f8fa 	bl	8005c70 <_init>
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	4d0a      	ldr	r5, [pc, #40]	@ (8003aa8 <__libc_init_array+0x40>)
 8003a80:	4c0a      	ldr	r4, [pc, #40]	@ (8003aac <__libc_init_array+0x44>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08006038 	.word	0x08006038
 8003aa4:	08006038 	.word	0x08006038
 8003aa8:	08006038 	.word	0x08006038
 8003aac:	0800603c 	.word	0x0800603c

08003ab0 <__retarget_lock_init_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_acquire_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <__retarget_lock_release_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <memchr>:
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	b2c9      	uxtb	r1, r1
 8003abc:	4402      	add	r2, r0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	d101      	bne.n	8003ac8 <memchr+0x12>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e003      	b.n	8003ad0 <memchr+0x1a>
 8003ac8:	7804      	ldrb	r4, [r0, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	428c      	cmp	r4, r1
 8003ace:	d1f6      	bne.n	8003abe <memchr+0x8>
 8003ad0:	bd10      	pop	{r4, pc}

08003ad2 <quorem>:
 8003ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad6:	6903      	ldr	r3, [r0, #16]
 8003ad8:	690c      	ldr	r4, [r1, #16]
 8003ada:	4607      	mov	r7, r0
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	db7e      	blt.n	8003bde <quorem+0x10c>
 8003ae0:	3c01      	subs	r4, #1
 8003ae2:	00a3      	lsls	r3, r4, #2
 8003ae4:	f100 0514 	add.w	r5, r0, #20
 8003ae8:	f101 0814 	add.w	r8, r1, #20
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003afc:	3301      	adds	r3, #1
 8003afe:	429a      	cmp	r2, r3
 8003b00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b08:	d32e      	bcc.n	8003b68 <quorem+0x96>
 8003b0a:	f04f 0a00 	mov.w	sl, #0
 8003b0e:	46c4      	mov	ip, r8
 8003b10:	46ae      	mov	lr, r5
 8003b12:	46d3      	mov	fp, sl
 8003b14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b18:	b298      	uxth	r0, r3
 8003b1a:	fb06 a000 	mla	r0, r6, r0, sl
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	0c02      	lsrs	r2, r0, #16
 8003b22:	fb06 2303 	mla	r3, r6, r3, r2
 8003b26:	f8de 2000 	ldr.w	r2, [lr]
 8003b2a:	b280      	uxth	r0, r0
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	1a12      	subs	r2, r2, r0
 8003b30:	445a      	add	r2, fp
 8003b32:	f8de 0000 	ldr.w	r0, [lr]
 8003b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b44:	b292      	uxth	r2, r2
 8003b46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b4a:	45e1      	cmp	r9, ip
 8003b4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b50:	f84e 2b04 	str.w	r2, [lr], #4
 8003b54:	d2de      	bcs.n	8003b14 <quorem+0x42>
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	58eb      	ldr	r3, [r5, r3]
 8003b5a:	b92b      	cbnz	r3, 8003b68 <quorem+0x96>
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	429d      	cmp	r5, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	d32f      	bcc.n	8003bc6 <quorem+0xf4>
 8003b66:	613c      	str	r4, [r7, #16]
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f001 fb33 	bl	80051d4 <__mcmp>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	db25      	blt.n	8003bbe <quorem+0xec>
 8003b72:	4629      	mov	r1, r5
 8003b74:	2000      	movs	r0, #0
 8003b76:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b7a:	f8d1 c000 	ldr.w	ip, [r1]
 8003b7e:	fa1f fe82 	uxth.w	lr, r2
 8003b82:	fa1f f38c 	uxth.w	r3, ip
 8003b86:	eba3 030e 	sub.w	r3, r3, lr
 8003b8a:	4403      	add	r3, r0
 8003b8c:	0c12      	lsrs	r2, r2, #16
 8003b8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b9c:	45c1      	cmp	r9, r8
 8003b9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003ba2:	f841 3b04 	str.w	r3, [r1], #4
 8003ba6:	d2e6      	bcs.n	8003b76 <quorem+0xa4>
 8003ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bb0:	b922      	cbnz	r2, 8003bbc <quorem+0xea>
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	429d      	cmp	r5, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	d30b      	bcc.n	8003bd2 <quorem+0x100>
 8003bba:	613c      	str	r4, [r7, #16]
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	b003      	add	sp, #12
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d1cb      	bne.n	8003b66 <quorem+0x94>
 8003bce:	3c01      	subs	r4, #1
 8003bd0:	e7c6      	b.n	8003b60 <quorem+0x8e>
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	3b04      	subs	r3, #4
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d1ef      	bne.n	8003bba <quorem+0xe8>
 8003bda:	3c01      	subs	r4, #1
 8003bdc:	e7ea      	b.n	8003bb4 <quorem+0xe2>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e7ee      	b.n	8003bc0 <quorem+0xee>
 8003be2:	0000      	movs	r0, r0
 8003be4:	0000      	movs	r0, r0
	...

08003be8 <_dtoa_r>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	69c7      	ldr	r7, [r0, #28]
 8003bf2:	b097      	sub	sp, #92	@ 0x5c
 8003bf4:	4683      	mov	fp, r0
 8003bf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003bfa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003bfc:	b97f      	cbnz	r7, 8003c1e <_dtoa_r+0x36>
 8003bfe:	2010      	movs	r0, #16
 8003c00:	f000 ff12 	bl	8004a28 <malloc>
 8003c04:	4602      	mov	r2, r0
 8003c06:	f8cb 001c 	str.w	r0, [fp, #28]
 8003c0a:	b920      	cbnz	r0, 8003c16 <_dtoa_r+0x2e>
 8003c0c:	21ef      	movs	r1, #239	@ 0xef
 8003c0e:	4ba8      	ldr	r3, [pc, #672]	@ (8003eb0 <_dtoa_r+0x2c8>)
 8003c10:	48a8      	ldr	r0, [pc, #672]	@ (8003eb4 <_dtoa_r+0x2cc>)
 8003c12:	f001 fcd7 	bl	80055c4 <__assert_func>
 8003c16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003c1a:	6007      	str	r7, [r0, #0]
 8003c1c:	60c7      	str	r7, [r0, #12]
 8003c1e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	b159      	cbz	r1, 8003c3e <_dtoa_r+0x56>
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	4093      	lsls	r3, r2
 8003c2c:	604a      	str	r2, [r1, #4]
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	4658      	mov	r0, fp
 8003c32:	f001 f897 	bl	8004d64 <_Bfree>
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	1e2b      	subs	r3, r5, #0
 8003c40:	bfaf      	iteee	ge
 8003c42:	2300      	movge	r3, #0
 8003c44:	2201      	movlt	r2, #1
 8003c46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	9303      	strlt	r3, [sp, #12]
 8003c4c:	bfa8      	it	ge
 8003c4e:	6033      	strge	r3, [r6, #0]
 8003c50:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003c54:	4b98      	ldr	r3, [pc, #608]	@ (8003eb8 <_dtoa_r+0x2d0>)
 8003c56:	bfb8      	it	lt
 8003c58:	6032      	strlt	r2, [r6, #0]
 8003c5a:	ea33 0308 	bics.w	r3, r3, r8
 8003c5e:	d112      	bne.n	8003c86 <_dtoa_r+0x9e>
 8003c60:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003c6c:	4323      	orrs	r3, r4
 8003c6e:	f000 8550 	beq.w	8004712 <_dtoa_r+0xb2a>
 8003c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c74:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003ebc <_dtoa_r+0x2d4>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8552 	beq.w	8004722 <_dtoa_r+0xb3a>
 8003c7e:	f10a 0303 	add.w	r3, sl, #3
 8003c82:	f000 bd4c 	b.w	800471e <_dtoa_r+0xb36>
 8003c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c92:	2200      	movs	r2, #0
 8003c94:	2300      	movs	r3, #0
 8003c96:	f7fc ff3b 	bl	8000b10 <__aeabi_dcmpeq>
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	b158      	cbz	r0, 8003cb6 <_dtoa_r+0xce>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ca6:	b113      	cbz	r3, 8003cae <_dtoa_r+0xc6>
 8003ca8:	4b85      	ldr	r3, [pc, #532]	@ (8003ec0 <_dtoa_r+0x2d8>)
 8003caa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003ec4 <_dtoa_r+0x2dc>
 8003cb2:	f000 bd36 	b.w	8004722 <_dtoa_r+0xb3a>
 8003cb6:	ab14      	add	r3, sp, #80	@ 0x50
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	ab15      	add	r3, sp, #84	@ 0x54
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4658      	mov	r0, fp
 8003cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003cc4:	f001 fb36 	bl	8005334 <__d2b>
 8003cc8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003ccc:	4681      	mov	r9, r0
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d077      	beq.n	8003dc2 <_dtoa_r+0x1da>
 8003cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003cd8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003ce4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003ce8:	9712      	str	r7, [sp, #72]	@ 0x48
 8003cea:	4619      	mov	r1, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <_dtoa_r+0x2e0>)
 8003cf0:	f7fc faee 	bl	80002d0 <__aeabi_dsub>
 8003cf4:	a368      	add	r3, pc, #416	@ (adr r3, 8003e98 <_dtoa_r+0x2b0>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fca1 	bl	8000640 <__aeabi_dmul>
 8003cfe:	a368      	add	r3, pc, #416	@ (adr r3, 8003ea0 <_dtoa_r+0x2b8>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fae6 	bl	80002d4 <__adddf3>
 8003d08:	4604      	mov	r4, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	f7fc fc2d 	bl	800056c <__aeabi_i2d>
 8003d12:	a365      	add	r3, pc, #404	@ (adr r3, 8003ea8 <_dtoa_r+0x2c0>)
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f7fc fc92 	bl	8000640 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fad6 	bl	80002d4 <__adddf3>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	f7fc ff38 	bl	8000ba0 <__aeabi_d2iz>
 8003d30:	2200      	movs	r2, #0
 8003d32:	4607      	mov	r7, r0
 8003d34:	2300      	movs	r3, #0
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fef3 	bl	8000b24 <__aeabi_dcmplt>
 8003d3e:	b140      	cbz	r0, 8003d52 <_dtoa_r+0x16a>
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7fc fc13 	bl	800056c <__aeabi_i2d>
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	f7fc fee1 	bl	8000b10 <__aeabi_dcmpeq>
 8003d4e:	b900      	cbnz	r0, 8003d52 <_dtoa_r+0x16a>
 8003d50:	3f01      	subs	r7, #1
 8003d52:	2f16      	cmp	r7, #22
 8003d54:	d853      	bhi.n	8003dfe <_dtoa_r+0x216>
 8003d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <_dtoa_r+0x2e4>)
 8003d5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fede 	bl	8000b24 <__aeabi_dcmplt>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d04a      	beq.n	8003e02 <_dtoa_r+0x21a>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	3f01      	subs	r7, #1
 8003d70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d74:	1b9b      	subs	r3, r3, r6
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	bf46      	itte	mi
 8003d7a:	f1c3 0801 	rsbmi	r8, r3, #1
 8003d7e:	2300      	movmi	r3, #0
 8003d80:	f04f 0800 	movpl.w	r8, #0
 8003d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d86:	bf48      	it	mi
 8003d88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	db3b      	blt.n	8003e06 <_dtoa_r+0x21e>
 8003d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d90:	970e      	str	r7, [sp, #56]	@ 0x38
 8003d92:	443b      	add	r3, r7
 8003d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d96:	2300      	movs	r3, #0
 8003d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d866      	bhi.n	8003e6e <_dtoa_r+0x286>
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	bfc4      	itt	gt
 8003da4:	3b04      	subgt	r3, #4
 8003da6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003da8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003daa:	bfc8      	it	gt
 8003dac:	2400      	movgt	r4, #0
 8003dae:	f1a3 0302 	sub.w	r3, r3, #2
 8003db2:	bfd8      	it	le
 8003db4:	2401      	movle	r4, #1
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d864      	bhi.n	8003e84 <_dtoa_r+0x29c>
 8003dba:	e8df f003 	tbb	[pc, r3]
 8003dbe:	382b      	.short	0x382b
 8003dc0:	5636      	.short	0x5636
 8003dc2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003dc6:	441e      	add	r6, r3
 8003dc8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	bfc1      	itttt	gt
 8003dd0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003dd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8003dd8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ddc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003de0:	bfd6      	itet	le
 8003de2:	f1c3 0320 	rsble	r3, r3, #32
 8003de6:	ea48 0003 	orrgt.w	r0, r8, r3
 8003dea:	fa04 f003 	lslle.w	r0, r4, r3
 8003dee:	f7fc fbad 	bl	800054c <__aeabi_ui2d>
 8003df2:	2201      	movs	r2, #1
 8003df4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003df8:	3e01      	subs	r6, #1
 8003dfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8003dfc:	e775      	b.n	8003cea <_dtoa_r+0x102>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e7b6      	b.n	8003d70 <_dtoa_r+0x188>
 8003e02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003e04:	e7b5      	b.n	8003d72 <_dtoa_r+0x18a>
 8003e06:	427b      	negs	r3, r7
 8003e08:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	eba8 0807 	sub.w	r8, r8, r7
 8003e10:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e12:	e7c2      	b.n	8003d9a <_dtoa_r+0x1b2>
 8003e14:	2300      	movs	r3, #0
 8003e16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dc35      	bgt.n	8003e8a <_dtoa_r+0x2a2>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	461a      	mov	r2, r3
 8003e22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e26:	9221      	str	r2, [sp, #132]	@ 0x84
 8003e28:	e00b      	b.n	8003e42 <_dtoa_r+0x25a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e7f3      	b.n	8003e16 <_dtoa_r+0x22e>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	9308      	str	r3, [sp, #32]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	9307      	str	r3, [sp, #28]
 8003e3e:	bfb8      	it	lt
 8003e40:	2301      	movlt	r3, #1
 8003e42:	2100      	movs	r1, #0
 8003e44:	2204      	movs	r2, #4
 8003e46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003e4a:	f102 0514 	add.w	r5, r2, #20
 8003e4e:	429d      	cmp	r5, r3
 8003e50:	d91f      	bls.n	8003e92 <_dtoa_r+0x2aa>
 8003e52:	6041      	str	r1, [r0, #4]
 8003e54:	4658      	mov	r0, fp
 8003e56:	f000 ff45 	bl	8004ce4 <_Balloc>
 8003e5a:	4682      	mov	sl, r0
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d139      	bne.n	8003ed4 <_dtoa_r+0x2ec>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <_dtoa_r+0x2e8>)
 8003e68:	e6d2      	b.n	8003c10 <_dtoa_r+0x28>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e7e0      	b.n	8003e30 <_dtoa_r+0x248>
 8003e6e:	2401      	movs	r4, #1
 8003e70:	2300      	movs	r3, #0
 8003e72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e74:	9320      	str	r3, [sp, #128]	@ 0x80
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e80:	2312      	movs	r3, #18
 8003e82:	e7d0      	b.n	8003e26 <_dtoa_r+0x23e>
 8003e84:	2301      	movs	r3, #1
 8003e86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e88:	e7f5      	b.n	8003e76 <_dtoa_r+0x28e>
 8003e8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e90:	e7d7      	b.n	8003e42 <_dtoa_r+0x25a>
 8003e92:	3101      	adds	r1, #1
 8003e94:	0052      	lsls	r2, r2, #1
 8003e96:	e7d8      	b.n	8003e4a <_dtoa_r+0x262>
 8003e98:	636f4361 	.word	0x636f4361
 8003e9c:	3fd287a7 	.word	0x3fd287a7
 8003ea0:	8b60c8b3 	.word	0x8b60c8b3
 8003ea4:	3fc68a28 	.word	0x3fc68a28
 8003ea8:	509f79fb 	.word	0x509f79fb
 8003eac:	3fd34413 	.word	0x3fd34413
 8003eb0:	08005cff 	.word	0x08005cff
 8003eb4:	08005d16 	.word	0x08005d16
 8003eb8:	7ff00000 	.word	0x7ff00000
 8003ebc:	08005cfb 	.word	0x08005cfb
 8003ec0:	08005ccf 	.word	0x08005ccf
 8003ec4:	08005cce 	.word	0x08005cce
 8003ec8:	3ff80000 	.word	0x3ff80000
 8003ecc:	08005e20 	.word	0x08005e20
 8003ed0:	08005d6e 	.word	0x08005d6e
 8003ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003ed8:	6018      	str	r0, [r3, #0]
 8003eda:	9b07      	ldr	r3, [sp, #28]
 8003edc:	2b0e      	cmp	r3, #14
 8003ede:	f200 80a4 	bhi.w	800402a <_dtoa_r+0x442>
 8003ee2:	2c00      	cmp	r4, #0
 8003ee4:	f000 80a1 	beq.w	800402a <_dtoa_r+0x442>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	dd33      	ble.n	8003f54 <_dtoa_r+0x36c>
 8003eec:	4b86      	ldr	r3, [pc, #536]	@ (8004108 <_dtoa_r+0x520>)
 8003eee:	f007 020f 	and.w	r2, r7, #15
 8003ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ef6:	05f8      	lsls	r0, r7, #23
 8003ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003efc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003f04:	d516      	bpl.n	8003f34 <_dtoa_r+0x34c>
 8003f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f0a:	4b80      	ldr	r3, [pc, #512]	@ (800410c <_dtoa_r+0x524>)
 8003f0c:	2603      	movs	r6, #3
 8003f0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f12:	f7fc fcbf 	bl	8000894 <__aeabi_ddiv>
 8003f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f1a:	f004 040f 	and.w	r4, r4, #15
 8003f1e:	4d7b      	ldr	r5, [pc, #492]	@ (800410c <_dtoa_r+0x524>)
 8003f20:	b954      	cbnz	r4, 8003f38 <_dtoa_r+0x350>
 8003f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f2a:	f7fc fcb3 	bl	8000894 <__aeabi_ddiv>
 8003f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f32:	e028      	b.n	8003f86 <_dtoa_r+0x39e>
 8003f34:	2602      	movs	r6, #2
 8003f36:	e7f2      	b.n	8003f1e <_dtoa_r+0x336>
 8003f38:	07e1      	lsls	r1, r4, #31
 8003f3a:	d508      	bpl.n	8003f4e <_dtoa_r+0x366>
 8003f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f44:	f7fc fb7c 	bl	8000640 <__aeabi_dmul>
 8003f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	1064      	asrs	r4, r4, #1
 8003f50:	3508      	adds	r5, #8
 8003f52:	e7e5      	b.n	8003f20 <_dtoa_r+0x338>
 8003f54:	f000 80d2 	beq.w	80040fc <_dtoa_r+0x514>
 8003f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f5c:	427c      	negs	r4, r7
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <_dtoa_r+0x520>)
 8003f60:	f004 020f 	and.w	r2, r4, #15
 8003f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fb68 	bl	8000640 <__aeabi_dmul>
 8003f70:	2602      	movs	r6, #2
 8003f72:	2300      	movs	r3, #0
 8003f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f78:	4d64      	ldr	r5, [pc, #400]	@ (800410c <_dtoa_r+0x524>)
 8003f7a:	1124      	asrs	r4, r4, #4
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	f040 80b2 	bne.w	80040e6 <_dtoa_r+0x4fe>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1d3      	bne.n	8003f2e <_dtoa_r+0x346>
 8003f86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80b7 	beq.w	8004100 <_dtoa_r+0x518>
 8003f92:	2200      	movs	r2, #0
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	4b5d      	ldr	r3, [pc, #372]	@ (8004110 <_dtoa_r+0x528>)
 8003f9a:	f7fc fdc3 	bl	8000b24 <__aeabi_dcmplt>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	f000 80ae 	beq.w	8004100 <_dtoa_r+0x518>
 8003fa4:	9b07      	ldr	r3, [sp, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80aa 	beq.w	8004100 <_dtoa_r+0x518>
 8003fac:	9b08      	ldr	r3, [sp, #32]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dd37      	ble.n	8004022 <_dtoa_r+0x43a>
 8003fb2:	1e7b      	subs	r3, r7, #1
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4b55      	ldr	r3, [pc, #340]	@ (8004114 <_dtoa_r+0x52c>)
 8003fbe:	f7fc fb3f 	bl	8000640 <__aeabi_dmul>
 8003fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc6:	9c08      	ldr	r4, [sp, #32]
 8003fc8:	3601      	adds	r6, #1
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7fc face 	bl	800056c <__aeabi_i2d>
 8003fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fd4:	f7fc fb34 	bl	8000640 <__aeabi_dmul>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4b4f      	ldr	r3, [pc, #316]	@ (8004118 <_dtoa_r+0x530>)
 8003fdc:	f7fc f97a 	bl	80002d4 <__adddf3>
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003fe6:	2c00      	cmp	r4, #0
 8003fe8:	f040 809a 	bne.w	8004120 <_dtoa_r+0x538>
 8003fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800411c <_dtoa_r+0x534>)
 8003ff4:	f7fc f96c 	bl	80002d0 <__aeabi_dsub>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004000:	462a      	mov	r2, r5
 8004002:	4633      	mov	r3, r6
 8004004:	f7fc fdac 	bl	8000b60 <__aeabi_dcmpgt>
 8004008:	2800      	cmp	r0, #0
 800400a:	f040 828e 	bne.w	800452a <_dtoa_r+0x942>
 800400e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004012:	462a      	mov	r2, r5
 8004014:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004018:	f7fc fd84 	bl	8000b24 <__aeabi_dcmplt>
 800401c:	2800      	cmp	r0, #0
 800401e:	f040 8127 	bne.w	8004270 <_dtoa_r+0x688>
 8004022:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004026:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800402a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800402c:	2b00      	cmp	r3, #0
 800402e:	f2c0 8163 	blt.w	80042f8 <_dtoa_r+0x710>
 8004032:	2f0e      	cmp	r7, #14
 8004034:	f300 8160 	bgt.w	80042f8 <_dtoa_r+0x710>
 8004038:	4b33      	ldr	r3, [pc, #204]	@ (8004108 <_dtoa_r+0x520>)
 800403a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800403e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004042:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004046:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004048:	2b00      	cmp	r3, #0
 800404a:	da03      	bge.n	8004054 <_dtoa_r+0x46c>
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f340 8100 	ble.w	8004254 <_dtoa_r+0x66c>
 8004054:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004058:	4656      	mov	r6, sl
 800405a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc fc17 	bl	8000894 <__aeabi_ddiv>
 8004066:	f7fc fd9b 	bl	8000ba0 <__aeabi_d2iz>
 800406a:	4680      	mov	r8, r0
 800406c:	f7fc fa7e 	bl	800056c <__aeabi_i2d>
 8004070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004074:	f7fc fae4 	bl	8000640 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4620      	mov	r0, r4
 800407e:	4629      	mov	r1, r5
 8004080:	f7fc f926 	bl	80002d0 <__aeabi_dsub>
 8004084:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004088:	9d07      	ldr	r5, [sp, #28]
 800408a:	f806 4b01 	strb.w	r4, [r6], #1
 800408e:	eba6 040a 	sub.w	r4, r6, sl
 8004092:	42a5      	cmp	r5, r4
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	f040 8116 	bne.w	80042c8 <_dtoa_r+0x6e0>
 800409c:	f7fc f91a 	bl	80002d4 <__adddf3>
 80040a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	f7fc fd5a 	bl	8000b60 <__aeabi_dcmpgt>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f040 80f8 	bne.w	80042a2 <_dtoa_r+0x6ba>
 80040b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fd29 	bl	8000b10 <__aeabi_dcmpeq>
 80040be:	b118      	cbz	r0, 80040c8 <_dtoa_r+0x4e0>
 80040c0:	f018 0f01 	tst.w	r8, #1
 80040c4:	f040 80ed 	bne.w	80042a2 <_dtoa_r+0x6ba>
 80040c8:	4649      	mov	r1, r9
 80040ca:	4658      	mov	r0, fp
 80040cc:	f000 fe4a 	bl	8004d64 <_Bfree>
 80040d0:	2300      	movs	r3, #0
 80040d2:	7033      	strb	r3, [r6, #0]
 80040d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80040d6:	3701      	adds	r7, #1
 80040d8:	601f      	str	r7, [r3, #0]
 80040da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8320 	beq.w	8004722 <_dtoa_r+0xb3a>
 80040e2:	601e      	str	r6, [r3, #0]
 80040e4:	e31d      	b.n	8004722 <_dtoa_r+0xb3a>
 80040e6:	07e2      	lsls	r2, r4, #31
 80040e8:	d505      	bpl.n	80040f6 <_dtoa_r+0x50e>
 80040ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040ee:	f7fc faa7 	bl	8000640 <__aeabi_dmul>
 80040f2:	2301      	movs	r3, #1
 80040f4:	3601      	adds	r6, #1
 80040f6:	1064      	asrs	r4, r4, #1
 80040f8:	3508      	adds	r5, #8
 80040fa:	e73f      	b.n	8003f7c <_dtoa_r+0x394>
 80040fc:	2602      	movs	r6, #2
 80040fe:	e742      	b.n	8003f86 <_dtoa_r+0x39e>
 8004100:	9c07      	ldr	r4, [sp, #28]
 8004102:	9704      	str	r7, [sp, #16]
 8004104:	e761      	b.n	8003fca <_dtoa_r+0x3e2>
 8004106:	bf00      	nop
 8004108:	08005e20 	.word	0x08005e20
 800410c:	08005df8 	.word	0x08005df8
 8004110:	3ff00000 	.word	0x3ff00000
 8004114:	40240000 	.word	0x40240000
 8004118:	401c0000 	.word	0x401c0000
 800411c:	40140000 	.word	0x40140000
 8004120:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <_dtoa_r+0x6fc>)
 8004122:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800412c:	4454      	add	r4, sl
 800412e:	2900      	cmp	r1, #0
 8004130:	d045      	beq.n	80041be <_dtoa_r+0x5d6>
 8004132:	2000      	movs	r0, #0
 8004134:	496c      	ldr	r1, [pc, #432]	@ (80042e8 <_dtoa_r+0x700>)
 8004136:	f7fc fbad 	bl	8000894 <__aeabi_ddiv>
 800413a:	4633      	mov	r3, r6
 800413c:	462a      	mov	r2, r5
 800413e:	f7fc f8c7 	bl	80002d0 <__aeabi_dsub>
 8004142:	4656      	mov	r6, sl
 8004144:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800414c:	f7fc fd28 	bl	8000ba0 <__aeabi_d2iz>
 8004150:	4605      	mov	r5, r0
 8004152:	f7fc fa0b 	bl	800056c <__aeabi_i2d>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800415e:	f7fc f8b7 	bl	80002d0 <__aeabi_dsub>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	3530      	adds	r5, #48	@ 0x30
 8004168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800416c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004170:	f806 5b01 	strb.w	r5, [r6], #1
 8004174:	f7fc fcd6 	bl	8000b24 <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	d163      	bne.n	8004244 <_dtoa_r+0x65c>
 800417c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004180:	2000      	movs	r0, #0
 8004182:	495a      	ldr	r1, [pc, #360]	@ (80042ec <_dtoa_r+0x704>)
 8004184:	f7fc f8a4 	bl	80002d0 <__aeabi_dsub>
 8004188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800418c:	f7fc fcca 	bl	8000b24 <__aeabi_dcmplt>
 8004190:	2800      	cmp	r0, #0
 8004192:	f040 8087 	bne.w	80042a4 <_dtoa_r+0x6bc>
 8004196:	42a6      	cmp	r6, r4
 8004198:	f43f af43 	beq.w	8004022 <_dtoa_r+0x43a>
 800419c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041a0:	2200      	movs	r2, #0
 80041a2:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <_dtoa_r+0x708>)
 80041a4:	f7fc fa4c 	bl	8000640 <__aeabi_dmul>
 80041a8:	2200      	movs	r2, #0
 80041aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041b2:	4b4f      	ldr	r3, [pc, #316]	@ (80042f0 <_dtoa_r+0x708>)
 80041b4:	f7fc fa44 	bl	8000640 <__aeabi_dmul>
 80041b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041bc:	e7c4      	b.n	8004148 <_dtoa_r+0x560>
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7fc fa3d 	bl	8000640 <__aeabi_dmul>
 80041c6:	4656      	mov	r6, sl
 80041c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80041ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d2:	f7fc fce5 	bl	8000ba0 <__aeabi_d2iz>
 80041d6:	4605      	mov	r5, r0
 80041d8:	f7fc f9c8 	bl	800056c <__aeabi_i2d>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041e4:	f7fc f874 	bl	80002d0 <__aeabi_dsub>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	3530      	adds	r5, #48	@ 0x30
 80041ee:	f806 5b01 	strb.w	r5, [r6], #1
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	d124      	bne.n	8004248 <_dtoa_r+0x660>
 80041fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <_dtoa_r+0x700>)
 8004204:	f7fc f866 	bl	80002d4 <__adddf3>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004210:	f7fc fca6 	bl	8000b60 <__aeabi_dcmpgt>
 8004214:	2800      	cmp	r0, #0
 8004216:	d145      	bne.n	80042a4 <_dtoa_r+0x6bc>
 8004218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800421c:	2000      	movs	r0, #0
 800421e:	4932      	ldr	r1, [pc, #200]	@ (80042e8 <_dtoa_r+0x700>)
 8004220:	f7fc f856 	bl	80002d0 <__aeabi_dsub>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422c:	f7fc fc7a 	bl	8000b24 <__aeabi_dcmplt>
 8004230:	2800      	cmp	r0, #0
 8004232:	f43f aef6 	beq.w	8004022 <_dtoa_r+0x43a>
 8004236:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004238:	1e73      	subs	r3, r6, #1
 800423a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800423c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004240:	2b30      	cmp	r3, #48	@ 0x30
 8004242:	d0f8      	beq.n	8004236 <_dtoa_r+0x64e>
 8004244:	9f04      	ldr	r7, [sp, #16]
 8004246:	e73f      	b.n	80040c8 <_dtoa_r+0x4e0>
 8004248:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <_dtoa_r+0x708>)
 800424a:	f7fc f9f9 	bl	8000640 <__aeabi_dmul>
 800424e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004252:	e7bc      	b.n	80041ce <_dtoa_r+0x5e6>
 8004254:	d10c      	bne.n	8004270 <_dtoa_r+0x688>
 8004256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800425a:	2200      	movs	r2, #0
 800425c:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <_dtoa_r+0x70c>)
 800425e:	f7fc f9ef 	bl	8000640 <__aeabi_dmul>
 8004262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004266:	f7fc fc71 	bl	8000b4c <__aeabi_dcmpge>
 800426a:	2800      	cmp	r0, #0
 800426c:	f000 815b 	beq.w	8004526 <_dtoa_r+0x93e>
 8004270:	2400      	movs	r4, #0
 8004272:	4625      	mov	r5, r4
 8004274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004276:	4656      	mov	r6, sl
 8004278:	43db      	mvns	r3, r3
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	2700      	movs	r7, #0
 800427e:	4621      	mov	r1, r4
 8004280:	4658      	mov	r0, fp
 8004282:	f000 fd6f 	bl	8004d64 <_Bfree>
 8004286:	2d00      	cmp	r5, #0
 8004288:	d0dc      	beq.n	8004244 <_dtoa_r+0x65c>
 800428a:	b12f      	cbz	r7, 8004298 <_dtoa_r+0x6b0>
 800428c:	42af      	cmp	r7, r5
 800428e:	d003      	beq.n	8004298 <_dtoa_r+0x6b0>
 8004290:	4639      	mov	r1, r7
 8004292:	4658      	mov	r0, fp
 8004294:	f000 fd66 	bl	8004d64 <_Bfree>
 8004298:	4629      	mov	r1, r5
 800429a:	4658      	mov	r0, fp
 800429c:	f000 fd62 	bl	8004d64 <_Bfree>
 80042a0:	e7d0      	b.n	8004244 <_dtoa_r+0x65c>
 80042a2:	9704      	str	r7, [sp, #16]
 80042a4:	4633      	mov	r3, r6
 80042a6:	461e      	mov	r6, r3
 80042a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042ac:	2a39      	cmp	r2, #57	@ 0x39
 80042ae:	d107      	bne.n	80042c0 <_dtoa_r+0x6d8>
 80042b0:	459a      	cmp	sl, r3
 80042b2:	d1f8      	bne.n	80042a6 <_dtoa_r+0x6be>
 80042b4:	9a04      	ldr	r2, [sp, #16]
 80042b6:	3201      	adds	r2, #1
 80042b8:	9204      	str	r2, [sp, #16]
 80042ba:	2230      	movs	r2, #48	@ 0x30
 80042bc:	f88a 2000 	strb.w	r2, [sl]
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	3201      	adds	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e7bd      	b.n	8004244 <_dtoa_r+0x65c>
 80042c8:	2200      	movs	r2, #0
 80042ca:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <_dtoa_r+0x708>)
 80042cc:	f7fc f9b8 	bl	8000640 <__aeabi_dmul>
 80042d0:	2200      	movs	r2, #0
 80042d2:	2300      	movs	r3, #0
 80042d4:	4604      	mov	r4, r0
 80042d6:	460d      	mov	r5, r1
 80042d8:	f7fc fc1a 	bl	8000b10 <__aeabi_dcmpeq>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f43f aebc 	beq.w	800405a <_dtoa_r+0x472>
 80042e2:	e6f1      	b.n	80040c8 <_dtoa_r+0x4e0>
 80042e4:	08005e20 	.word	0x08005e20
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	3ff00000 	.word	0x3ff00000
 80042f0:	40240000 	.word	0x40240000
 80042f4:	40140000 	.word	0x40140000
 80042f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	f000 80db 	beq.w	80044b6 <_dtoa_r+0x8ce>
 8004300:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004302:	2a01      	cmp	r2, #1
 8004304:	f300 80bf 	bgt.w	8004486 <_dtoa_r+0x89e>
 8004308:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800430a:	2a00      	cmp	r2, #0
 800430c:	f000 80b7 	beq.w	800447e <_dtoa_r+0x896>
 8004310:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004314:	4646      	mov	r6, r8
 8004316:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800431a:	2101      	movs	r1, #1
 800431c:	441a      	add	r2, r3
 800431e:	4658      	mov	r0, fp
 8004320:	4498      	add	r8, r3
 8004322:	9209      	str	r2, [sp, #36]	@ 0x24
 8004324:	f000 fdd2 	bl	8004ecc <__i2b>
 8004328:	4605      	mov	r5, r0
 800432a:	b15e      	cbz	r6, 8004344 <_dtoa_r+0x75c>
 800432c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	dd08      	ble.n	8004344 <_dtoa_r+0x75c>
 8004332:	42b3      	cmp	r3, r6
 8004334:	bfa8      	it	ge
 8004336:	4633      	movge	r3, r6
 8004338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433a:	eba8 0803 	sub.w	r8, r8, r3
 800433e:	1af6      	subs	r6, r6, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	9309      	str	r3, [sp, #36]	@ 0x24
 8004344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004346:	b1f3      	cbz	r3, 8004386 <_dtoa_r+0x79e>
 8004348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80b7 	beq.w	80044be <_dtoa_r+0x8d6>
 8004350:	b18c      	cbz	r4, 8004376 <_dtoa_r+0x78e>
 8004352:	4629      	mov	r1, r5
 8004354:	4622      	mov	r2, r4
 8004356:	4658      	mov	r0, fp
 8004358:	f000 fe76 	bl	8005048 <__pow5mult>
 800435c:	464a      	mov	r2, r9
 800435e:	4601      	mov	r1, r0
 8004360:	4605      	mov	r5, r0
 8004362:	4658      	mov	r0, fp
 8004364:	f000 fdc8 	bl	8004ef8 <__multiply>
 8004368:	4649      	mov	r1, r9
 800436a:	9004      	str	r0, [sp, #16]
 800436c:	4658      	mov	r0, fp
 800436e:	f000 fcf9 	bl	8004d64 <_Bfree>
 8004372:	9b04      	ldr	r3, [sp, #16]
 8004374:	4699      	mov	r9, r3
 8004376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004378:	1b1a      	subs	r2, r3, r4
 800437a:	d004      	beq.n	8004386 <_dtoa_r+0x79e>
 800437c:	4649      	mov	r1, r9
 800437e:	4658      	mov	r0, fp
 8004380:	f000 fe62 	bl	8005048 <__pow5mult>
 8004384:	4681      	mov	r9, r0
 8004386:	2101      	movs	r1, #1
 8004388:	4658      	mov	r0, fp
 800438a:	f000 fd9f 	bl	8004ecc <__i2b>
 800438e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004390:	4604      	mov	r4, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 81c9 	beq.w	800472a <_dtoa_r+0xb42>
 8004398:	461a      	mov	r2, r3
 800439a:	4601      	mov	r1, r0
 800439c:	4658      	mov	r0, fp
 800439e:	f000 fe53 	bl	8005048 <__pow5mult>
 80043a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043a4:	4604      	mov	r4, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	f300 808f 	bgt.w	80044ca <_dtoa_r+0x8e2>
 80043ac:	9b02      	ldr	r3, [sp, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 8087 	bne.w	80044c2 <_dtoa_r+0x8da>
 80043b4:	9b03      	ldr	r3, [sp, #12]
 80043b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 8083 	bne.w	80044c6 <_dtoa_r+0x8de>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c6:	0d1b      	lsrs	r3, r3, #20
 80043c8:	051b      	lsls	r3, r3, #20
 80043ca:	b12b      	cbz	r3, 80043d8 <_dtoa_r+0x7f0>
 80043cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ce:	f108 0801 	add.w	r8, r8, #1
 80043d2:	3301      	adds	r3, #1
 80043d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d6:	2301      	movs	r3, #1
 80043d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 81aa 	beq.w	8004736 <_dtoa_r+0xb4e>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043e8:	6918      	ldr	r0, [r3, #16]
 80043ea:	f000 fd23 	bl	8004e34 <__hi0bits>
 80043ee:	f1c0 0020 	rsb	r0, r0, #32
 80043f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f4:	4418      	add	r0, r3
 80043f6:	f010 001f 	ands.w	r0, r0, #31
 80043fa:	d071      	beq.n	80044e0 <_dtoa_r+0x8f8>
 80043fc:	f1c0 0320 	rsb	r3, r0, #32
 8004400:	2b04      	cmp	r3, #4
 8004402:	dd65      	ble.n	80044d0 <_dtoa_r+0x8e8>
 8004404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004406:	f1c0 001c 	rsb	r0, r0, #28
 800440a:	4403      	add	r3, r0
 800440c:	4480      	add	r8, r0
 800440e:	4406      	add	r6, r0
 8004410:	9309      	str	r3, [sp, #36]	@ 0x24
 8004412:	f1b8 0f00 	cmp.w	r8, #0
 8004416:	dd05      	ble.n	8004424 <_dtoa_r+0x83c>
 8004418:	4649      	mov	r1, r9
 800441a:	4642      	mov	r2, r8
 800441c:	4658      	mov	r0, fp
 800441e:	f000 fe6d 	bl	80050fc <__lshift>
 8004422:	4681      	mov	r9, r0
 8004424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	dd05      	ble.n	8004436 <_dtoa_r+0x84e>
 800442a:	4621      	mov	r1, r4
 800442c:	461a      	mov	r2, r3
 800442e:	4658      	mov	r0, fp
 8004430:	f000 fe64 	bl	80050fc <__lshift>
 8004434:	4604      	mov	r4, r0
 8004436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d053      	beq.n	80044e4 <_dtoa_r+0x8fc>
 800443c:	4621      	mov	r1, r4
 800443e:	4648      	mov	r0, r9
 8004440:	f000 fec8 	bl	80051d4 <__mcmp>
 8004444:	2800      	cmp	r0, #0
 8004446:	da4d      	bge.n	80044e4 <_dtoa_r+0x8fc>
 8004448:	1e7b      	subs	r3, r7, #1
 800444a:	4649      	mov	r1, r9
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	220a      	movs	r2, #10
 8004450:	2300      	movs	r3, #0
 8004452:	4658      	mov	r0, fp
 8004454:	f000 fca8 	bl	8004da8 <__multadd>
 8004458:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800445a:	4681      	mov	r9, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 816c 	beq.w	800473a <_dtoa_r+0xb52>
 8004462:	2300      	movs	r3, #0
 8004464:	4629      	mov	r1, r5
 8004466:	220a      	movs	r2, #10
 8004468:	4658      	mov	r0, fp
 800446a:	f000 fc9d 	bl	8004da8 <__multadd>
 800446e:	9b08      	ldr	r3, [sp, #32]
 8004470:	4605      	mov	r5, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	dc61      	bgt.n	800453a <_dtoa_r+0x952>
 8004476:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004478:	2b02      	cmp	r3, #2
 800447a:	dc3b      	bgt.n	80044f4 <_dtoa_r+0x90c>
 800447c:	e05d      	b.n	800453a <_dtoa_r+0x952>
 800447e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004480:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004484:	e746      	b.n	8004314 <_dtoa_r+0x72c>
 8004486:	9b07      	ldr	r3, [sp, #28]
 8004488:	1e5c      	subs	r4, r3, #1
 800448a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800448c:	42a3      	cmp	r3, r4
 800448e:	bfbf      	itttt	lt
 8004490:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004492:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004494:	1ae3      	sublt	r3, r4, r3
 8004496:	18d2      	addlt	r2, r2, r3
 8004498:	bfa8      	it	ge
 800449a:	1b1c      	subge	r4, r3, r4
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	bfbe      	ittt	lt
 80044a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80044a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80044a4:	2400      	movlt	r4, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfb5      	itete	lt
 80044aa:	eba8 0603 	sublt.w	r6, r8, r3
 80044ae:	4646      	movge	r6, r8
 80044b0:	2300      	movlt	r3, #0
 80044b2:	9b07      	ldrge	r3, [sp, #28]
 80044b4:	e730      	b.n	8004318 <_dtoa_r+0x730>
 80044b6:	4646      	mov	r6, r8
 80044b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80044ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80044bc:	e735      	b.n	800432a <_dtoa_r+0x742>
 80044be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c0:	e75c      	b.n	800437c <_dtoa_r+0x794>
 80044c2:	2300      	movs	r3, #0
 80044c4:	e788      	b.n	80043d8 <_dtoa_r+0x7f0>
 80044c6:	9b02      	ldr	r3, [sp, #8]
 80044c8:	e786      	b.n	80043d8 <_dtoa_r+0x7f0>
 80044ca:	2300      	movs	r3, #0
 80044cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ce:	e788      	b.n	80043e2 <_dtoa_r+0x7fa>
 80044d0:	d09f      	beq.n	8004412 <_dtoa_r+0x82a>
 80044d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d4:	331c      	adds	r3, #28
 80044d6:	441a      	add	r2, r3
 80044d8:	4498      	add	r8, r3
 80044da:	441e      	add	r6, r3
 80044dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80044de:	e798      	b.n	8004412 <_dtoa_r+0x82a>
 80044e0:	4603      	mov	r3, r0
 80044e2:	e7f6      	b.n	80044d2 <_dtoa_r+0x8ea>
 80044e4:	9b07      	ldr	r3, [sp, #28]
 80044e6:	9704      	str	r7, [sp, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc20      	bgt.n	800452e <_dtoa_r+0x946>
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	dd1e      	ble.n	8004532 <_dtoa_r+0x94a>
 80044f4:	9b08      	ldr	r3, [sp, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f aebc 	bne.w	8004274 <_dtoa_r+0x68c>
 80044fc:	4621      	mov	r1, r4
 80044fe:	2205      	movs	r2, #5
 8004500:	4658      	mov	r0, fp
 8004502:	f000 fc51 	bl	8004da8 <__multadd>
 8004506:	4601      	mov	r1, r0
 8004508:	4604      	mov	r4, r0
 800450a:	4648      	mov	r0, r9
 800450c:	f000 fe62 	bl	80051d4 <__mcmp>
 8004510:	2800      	cmp	r0, #0
 8004512:	f77f aeaf 	ble.w	8004274 <_dtoa_r+0x68c>
 8004516:	2331      	movs	r3, #49	@ 0x31
 8004518:	4656      	mov	r6, sl
 800451a:	f806 3b01 	strb.w	r3, [r6], #1
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	9304      	str	r3, [sp, #16]
 8004524:	e6aa      	b.n	800427c <_dtoa_r+0x694>
 8004526:	9c07      	ldr	r4, [sp, #28]
 8004528:	9704      	str	r7, [sp, #16]
 800452a:	4625      	mov	r5, r4
 800452c:	e7f3      	b.n	8004516 <_dtoa_r+0x92e>
 800452e:	9b07      	ldr	r3, [sp, #28]
 8004530:	9308      	str	r3, [sp, #32]
 8004532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8104 	beq.w	8004742 <_dtoa_r+0xb5a>
 800453a:	2e00      	cmp	r6, #0
 800453c:	dd05      	ble.n	800454a <_dtoa_r+0x962>
 800453e:	4629      	mov	r1, r5
 8004540:	4632      	mov	r2, r6
 8004542:	4658      	mov	r0, fp
 8004544:	f000 fdda 	bl	80050fc <__lshift>
 8004548:	4605      	mov	r5, r0
 800454a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05a      	beq.n	8004606 <_dtoa_r+0xa1e>
 8004550:	4658      	mov	r0, fp
 8004552:	6869      	ldr	r1, [r5, #4]
 8004554:	f000 fbc6 	bl	8004ce4 <_Balloc>
 8004558:	4606      	mov	r6, r0
 800455a:	b928      	cbnz	r0, 8004568 <_dtoa_r+0x980>
 800455c:	4602      	mov	r2, r0
 800455e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004562:	4b83      	ldr	r3, [pc, #524]	@ (8004770 <_dtoa_r+0xb88>)
 8004564:	f7ff bb54 	b.w	8003c10 <_dtoa_r+0x28>
 8004568:	692a      	ldr	r2, [r5, #16]
 800456a:	f105 010c 	add.w	r1, r5, #12
 800456e:	3202      	adds	r2, #2
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	300c      	adds	r0, #12
 8004574:	f001 f818 	bl	80055a8 <memcpy>
 8004578:	2201      	movs	r2, #1
 800457a:	4631      	mov	r1, r6
 800457c:	4658      	mov	r0, fp
 800457e:	f000 fdbd 	bl	80050fc <__lshift>
 8004582:	462f      	mov	r7, r5
 8004584:	4605      	mov	r5, r0
 8004586:	f10a 0301 	add.w	r3, sl, #1
 800458a:	9307      	str	r3, [sp, #28]
 800458c:	9b08      	ldr	r3, [sp, #32]
 800458e:	4453      	add	r3, sl
 8004590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004592:	9b02      	ldr	r3, [sp, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	930a      	str	r3, [sp, #40]	@ 0x28
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	4621      	mov	r1, r4
 800459e:	3b01      	subs	r3, #1
 80045a0:	4648      	mov	r0, r9
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	f7ff fa95 	bl	8003ad2 <quorem>
 80045a8:	4639      	mov	r1, r7
 80045aa:	9008      	str	r0, [sp, #32]
 80045ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80045b0:	4648      	mov	r0, r9
 80045b2:	f000 fe0f 	bl	80051d4 <__mcmp>
 80045b6:	462a      	mov	r2, r5
 80045b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80045ba:	4621      	mov	r1, r4
 80045bc:	4658      	mov	r0, fp
 80045be:	f000 fe25 	bl	800520c <__mdiff>
 80045c2:	68c2      	ldr	r2, [r0, #12]
 80045c4:	4606      	mov	r6, r0
 80045c6:	bb02      	cbnz	r2, 800460a <_dtoa_r+0xa22>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4648      	mov	r0, r9
 80045cc:	f000 fe02 	bl	80051d4 <__mcmp>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4631      	mov	r1, r6
 80045d4:	4658      	mov	r0, fp
 80045d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80045d8:	f000 fbc4 	bl	8004d64 <_Bfree>
 80045dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80045e0:	9e07      	ldr	r6, [sp, #28]
 80045e2:	ea43 0102 	orr.w	r1, r3, r2
 80045e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045e8:	4319      	orrs	r1, r3
 80045ea:	d110      	bne.n	800460e <_dtoa_r+0xa26>
 80045ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045f0:	d029      	beq.n	8004646 <_dtoa_r+0xa5e>
 80045f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dd02      	ble.n	80045fe <_dtoa_r+0xa16>
 80045f8:	9b08      	ldr	r3, [sp, #32]
 80045fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	f883 8000 	strb.w	r8, [r3]
 8004604:	e63b      	b.n	800427e <_dtoa_r+0x696>
 8004606:	4628      	mov	r0, r5
 8004608:	e7bb      	b.n	8004582 <_dtoa_r+0x99a>
 800460a:	2201      	movs	r2, #1
 800460c:	e7e1      	b.n	80045d2 <_dtoa_r+0x9ea>
 800460e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	db04      	blt.n	800461e <_dtoa_r+0xa36>
 8004614:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004616:	430b      	orrs	r3, r1
 8004618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800461a:	430b      	orrs	r3, r1
 800461c:	d120      	bne.n	8004660 <_dtoa_r+0xa78>
 800461e:	2a00      	cmp	r2, #0
 8004620:	dded      	ble.n	80045fe <_dtoa_r+0xa16>
 8004622:	4649      	mov	r1, r9
 8004624:	2201      	movs	r2, #1
 8004626:	4658      	mov	r0, fp
 8004628:	f000 fd68 	bl	80050fc <__lshift>
 800462c:	4621      	mov	r1, r4
 800462e:	4681      	mov	r9, r0
 8004630:	f000 fdd0 	bl	80051d4 <__mcmp>
 8004634:	2800      	cmp	r0, #0
 8004636:	dc03      	bgt.n	8004640 <_dtoa_r+0xa58>
 8004638:	d1e1      	bne.n	80045fe <_dtoa_r+0xa16>
 800463a:	f018 0f01 	tst.w	r8, #1
 800463e:	d0de      	beq.n	80045fe <_dtoa_r+0xa16>
 8004640:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004644:	d1d8      	bne.n	80045f8 <_dtoa_r+0xa10>
 8004646:	2339      	movs	r3, #57	@ 0x39
 8004648:	9a02      	ldr	r2, [sp, #8]
 800464a:	7013      	strb	r3, [r2, #0]
 800464c:	4633      	mov	r3, r6
 800464e:	461e      	mov	r6, r3
 8004650:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004654:	3b01      	subs	r3, #1
 8004656:	2a39      	cmp	r2, #57	@ 0x39
 8004658:	d052      	beq.n	8004700 <_dtoa_r+0xb18>
 800465a:	3201      	adds	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e60e      	b.n	800427e <_dtoa_r+0x696>
 8004660:	2a00      	cmp	r2, #0
 8004662:	dd07      	ble.n	8004674 <_dtoa_r+0xa8c>
 8004664:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004668:	d0ed      	beq.n	8004646 <_dtoa_r+0xa5e>
 800466a:	9a02      	ldr	r2, [sp, #8]
 800466c:	f108 0301 	add.w	r3, r8, #1
 8004670:	7013      	strb	r3, [r2, #0]
 8004672:	e604      	b.n	800427e <_dtoa_r+0x696>
 8004674:	9b07      	ldr	r3, [sp, #28]
 8004676:	9a07      	ldr	r2, [sp, #28]
 8004678:	f803 8c01 	strb.w	r8, [r3, #-1]
 800467c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800467e:	4293      	cmp	r3, r2
 8004680:	d028      	beq.n	80046d4 <_dtoa_r+0xaec>
 8004682:	4649      	mov	r1, r9
 8004684:	2300      	movs	r3, #0
 8004686:	220a      	movs	r2, #10
 8004688:	4658      	mov	r0, fp
 800468a:	f000 fb8d 	bl	8004da8 <__multadd>
 800468e:	42af      	cmp	r7, r5
 8004690:	4681      	mov	r9, r0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	f04f 020a 	mov.w	r2, #10
 800469a:	4639      	mov	r1, r7
 800469c:	4658      	mov	r0, fp
 800469e:	d107      	bne.n	80046b0 <_dtoa_r+0xac8>
 80046a0:	f000 fb82 	bl	8004da8 <__multadd>
 80046a4:	4607      	mov	r7, r0
 80046a6:	4605      	mov	r5, r0
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	9307      	str	r3, [sp, #28]
 80046ae:	e774      	b.n	800459a <_dtoa_r+0x9b2>
 80046b0:	f000 fb7a 	bl	8004da8 <__multadd>
 80046b4:	4629      	mov	r1, r5
 80046b6:	4607      	mov	r7, r0
 80046b8:	2300      	movs	r3, #0
 80046ba:	220a      	movs	r2, #10
 80046bc:	4658      	mov	r0, fp
 80046be:	f000 fb73 	bl	8004da8 <__multadd>
 80046c2:	4605      	mov	r5, r0
 80046c4:	e7f0      	b.n	80046a8 <_dtoa_r+0xac0>
 80046c6:	9b08      	ldr	r3, [sp, #32]
 80046c8:	2700      	movs	r7, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfcc      	ite	gt
 80046ce:	461e      	movgt	r6, r3
 80046d0:	2601      	movle	r6, #1
 80046d2:	4456      	add	r6, sl
 80046d4:	4649      	mov	r1, r9
 80046d6:	2201      	movs	r2, #1
 80046d8:	4658      	mov	r0, fp
 80046da:	f000 fd0f 	bl	80050fc <__lshift>
 80046de:	4621      	mov	r1, r4
 80046e0:	4681      	mov	r9, r0
 80046e2:	f000 fd77 	bl	80051d4 <__mcmp>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	dcb0      	bgt.n	800464c <_dtoa_r+0xa64>
 80046ea:	d102      	bne.n	80046f2 <_dtoa_r+0xb0a>
 80046ec:	f018 0f01 	tst.w	r8, #1
 80046f0:	d1ac      	bne.n	800464c <_dtoa_r+0xa64>
 80046f2:	4633      	mov	r3, r6
 80046f4:	461e      	mov	r6, r3
 80046f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046fa:	2a30      	cmp	r2, #48	@ 0x30
 80046fc:	d0fa      	beq.n	80046f4 <_dtoa_r+0xb0c>
 80046fe:	e5be      	b.n	800427e <_dtoa_r+0x696>
 8004700:	459a      	cmp	sl, r3
 8004702:	d1a4      	bne.n	800464e <_dtoa_r+0xa66>
 8004704:	9b04      	ldr	r3, [sp, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	2331      	movs	r3, #49	@ 0x31
 800470c:	f88a 3000 	strb.w	r3, [sl]
 8004710:	e5b5      	b.n	800427e <_dtoa_r+0x696>
 8004712:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004714:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004774 <_dtoa_r+0xb8c>
 8004718:	b11b      	cbz	r3, 8004722 <_dtoa_r+0xb3a>
 800471a:	f10a 0308 	add.w	r3, sl, #8
 800471e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4650      	mov	r0, sl
 8004724:	b017      	add	sp, #92	@ 0x5c
 8004726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800472c:	2b01      	cmp	r3, #1
 800472e:	f77f ae3d 	ble.w	80043ac <_dtoa_r+0x7c4>
 8004732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004734:	930a      	str	r3, [sp, #40]	@ 0x28
 8004736:	2001      	movs	r0, #1
 8004738:	e65b      	b.n	80043f2 <_dtoa_r+0x80a>
 800473a:	9b08      	ldr	r3, [sp, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f77f aed6 	ble.w	80044ee <_dtoa_r+0x906>
 8004742:	4656      	mov	r6, sl
 8004744:	4621      	mov	r1, r4
 8004746:	4648      	mov	r0, r9
 8004748:	f7ff f9c3 	bl	8003ad2 <quorem>
 800474c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004750:	9b08      	ldr	r3, [sp, #32]
 8004752:	f806 8b01 	strb.w	r8, [r6], #1
 8004756:	eba6 020a 	sub.w	r2, r6, sl
 800475a:	4293      	cmp	r3, r2
 800475c:	ddb3      	ble.n	80046c6 <_dtoa_r+0xade>
 800475e:	4649      	mov	r1, r9
 8004760:	2300      	movs	r3, #0
 8004762:	220a      	movs	r2, #10
 8004764:	4658      	mov	r0, fp
 8004766:	f000 fb1f 	bl	8004da8 <__multadd>
 800476a:	4681      	mov	r9, r0
 800476c:	e7ea      	b.n	8004744 <_dtoa_r+0xb5c>
 800476e:	bf00      	nop
 8004770:	08005d6e 	.word	0x08005d6e
 8004774:	08005cf2 	.word	0x08005cf2

08004778 <__ssputs_r>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	461f      	mov	r7, r3
 800477e:	688e      	ldr	r6, [r1, #8]
 8004780:	4682      	mov	sl, r0
 8004782:	42be      	cmp	r6, r7
 8004784:	460c      	mov	r4, r1
 8004786:	4690      	mov	r8, r2
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	d82d      	bhi.n	80047e8 <__ssputs_r+0x70>
 800478c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004794:	d026      	beq.n	80047e4 <__ssputs_r+0x6c>
 8004796:	6965      	ldr	r5, [r4, #20]
 8004798:	6909      	ldr	r1, [r1, #16]
 800479a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800479e:	eba3 0901 	sub.w	r9, r3, r1
 80047a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047a6:	1c7b      	adds	r3, r7, #1
 80047a8:	444b      	add	r3, r9
 80047aa:	106d      	asrs	r5, r5, #1
 80047ac:	429d      	cmp	r5, r3
 80047ae:	bf38      	it	cc
 80047b0:	461d      	movcc	r5, r3
 80047b2:	0553      	lsls	r3, r2, #21
 80047b4:	d527      	bpl.n	8004806 <__ssputs_r+0x8e>
 80047b6:	4629      	mov	r1, r5
 80047b8:	f000 f960 	bl	8004a7c <_malloc_r>
 80047bc:	4606      	mov	r6, r0
 80047be:	b360      	cbz	r0, 800481a <__ssputs_r+0xa2>
 80047c0:	464a      	mov	r2, r9
 80047c2:	6921      	ldr	r1, [r4, #16]
 80047c4:	f000 fef0 	bl	80055a8 <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	444e      	add	r6, r9
 80047d8:	6026      	str	r6, [r4, #0]
 80047da:	463e      	mov	r6, r7
 80047dc:	6165      	str	r5, [r4, #20]
 80047de:	eba5 0509 	sub.w	r5, r5, r9
 80047e2:	60a5      	str	r5, [r4, #8]
 80047e4:	42be      	cmp	r6, r7
 80047e6:	d900      	bls.n	80047ea <__ssputs_r+0x72>
 80047e8:	463e      	mov	r6, r7
 80047ea:	4632      	mov	r2, r6
 80047ec:	4641      	mov	r1, r8
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	f000 fe69 	bl	80054c6 <memmove>
 80047f4:	2000      	movs	r0, #0
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	1b9b      	subs	r3, r3, r6
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	4433      	add	r3, r6
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004806:	462a      	mov	r2, r5
 8004808:	f000 fe2f 	bl	800546a <_realloc_r>
 800480c:	4606      	mov	r6, r0
 800480e:	2800      	cmp	r0, #0
 8004810:	d1e0      	bne.n	80047d4 <__ssputs_r+0x5c>
 8004812:	4650      	mov	r0, sl
 8004814:	6921      	ldr	r1, [r4, #16]
 8004816:	f000 ff07 	bl	8005628 <_free_r>
 800481a:	230c      	movs	r3, #12
 800481c:	f8ca 3000 	str.w	r3, [sl]
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	e7e9      	b.n	8004802 <__ssputs_r+0x8a>
	...

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	4698      	mov	r8, r3
 8004836:	898b      	ldrh	r3, [r1, #12]
 8004838:	4607      	mov	r7, r0
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	460d      	mov	r5, r1
 800483e:	4614      	mov	r4, r2
 8004840:	b09d      	sub	sp, #116	@ 0x74
 8004842:	d510      	bpl.n	8004866 <_svfiprintf_r+0x36>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b973      	cbnz	r3, 8004866 <_svfiprintf_r+0x36>
 8004848:	2140      	movs	r1, #64	@ 0x40
 800484a:	f000 f917 	bl	8004a7c <_malloc_r>
 800484e:	6028      	str	r0, [r5, #0]
 8004850:	6128      	str	r0, [r5, #16]
 8004852:	b930      	cbnz	r0, 8004862 <_svfiprintf_r+0x32>
 8004854:	230c      	movs	r3, #12
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800485c:	b01d      	add	sp, #116	@ 0x74
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	2340      	movs	r3, #64	@ 0x40
 8004864:	616b      	str	r3, [r5, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	9309      	str	r3, [sp, #36]	@ 0x24
 800486a:	2320      	movs	r3, #32
 800486c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004870:	2330      	movs	r3, #48	@ 0x30
 8004872:	f04f 0901 	mov.w	r9, #1
 8004876:	f8cd 800c 	str.w	r8, [sp, #12]
 800487a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a14 <_svfiprintf_r+0x1e4>
 800487e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004882:	4623      	mov	r3, r4
 8004884:	469a      	mov	sl, r3
 8004886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488a:	b10a      	cbz	r2, 8004890 <_svfiprintf_r+0x60>
 800488c:	2a25      	cmp	r2, #37	@ 0x25
 800488e:	d1f9      	bne.n	8004884 <_svfiprintf_r+0x54>
 8004890:	ebba 0b04 	subs.w	fp, sl, r4
 8004894:	d00b      	beq.n	80048ae <_svfiprintf_r+0x7e>
 8004896:	465b      	mov	r3, fp
 8004898:	4622      	mov	r2, r4
 800489a:	4629      	mov	r1, r5
 800489c:	4638      	mov	r0, r7
 800489e:	f7ff ff6b 	bl	8004778 <__ssputs_r>
 80048a2:	3001      	adds	r0, #1
 80048a4:	f000 80a7 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048aa:	445a      	add	r2, fp
 80048ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80048ae:	f89a 3000 	ldrb.w	r3, [sl]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 809f 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c2:	f10a 0a01 	add.w	sl, sl, #1
 80048c6:	9304      	str	r3, [sp, #16]
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80048d0:	4654      	mov	r4, sl
 80048d2:	2205      	movs	r2, #5
 80048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d8:	484e      	ldr	r0, [pc, #312]	@ (8004a14 <_svfiprintf_r+0x1e4>)
 80048da:	f7ff f8ec 	bl	8003ab6 <memchr>
 80048de:	9a04      	ldr	r2, [sp, #16]
 80048e0:	b9d8      	cbnz	r0, 800491a <_svfiprintf_r+0xea>
 80048e2:	06d0      	lsls	r0, r2, #27
 80048e4:	bf44      	itt	mi
 80048e6:	2320      	movmi	r3, #32
 80048e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ec:	0711      	lsls	r1, r2, #28
 80048ee:	bf44      	itt	mi
 80048f0:	232b      	movmi	r3, #43	@ 0x2b
 80048f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fc:	d015      	beq.n	800492a <_svfiprintf_r+0xfa>
 80048fe:	4654      	mov	r4, sl
 8004900:	2000      	movs	r0, #0
 8004902:	f04f 0c0a 	mov.w	ip, #10
 8004906:	9a07      	ldr	r2, [sp, #28]
 8004908:	4621      	mov	r1, r4
 800490a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490e:	3b30      	subs	r3, #48	@ 0x30
 8004910:	2b09      	cmp	r3, #9
 8004912:	d94b      	bls.n	80049ac <_svfiprintf_r+0x17c>
 8004914:	b1b0      	cbz	r0, 8004944 <_svfiprintf_r+0x114>
 8004916:	9207      	str	r2, [sp, #28]
 8004918:	e014      	b.n	8004944 <_svfiprintf_r+0x114>
 800491a:	eba0 0308 	sub.w	r3, r0, r8
 800491e:	fa09 f303 	lsl.w	r3, r9, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	46a2      	mov	sl, r4
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	e7d2      	b.n	80048d0 <_svfiprintf_r+0xa0>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	1d19      	adds	r1, r3, #4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	9103      	str	r1, [sp, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	bfbb      	ittet	lt
 8004936:	425b      	neglt	r3, r3
 8004938:	f042 0202 	orrlt.w	r2, r2, #2
 800493c:	9307      	strge	r3, [sp, #28]
 800493e:	9307      	strlt	r3, [sp, #28]
 8004940:	bfb8      	it	lt
 8004942:	9204      	strlt	r2, [sp, #16]
 8004944:	7823      	ldrb	r3, [r4, #0]
 8004946:	2b2e      	cmp	r3, #46	@ 0x2e
 8004948:	d10a      	bne.n	8004960 <_svfiprintf_r+0x130>
 800494a:	7863      	ldrb	r3, [r4, #1]
 800494c:	2b2a      	cmp	r3, #42	@ 0x2a
 800494e:	d132      	bne.n	80049b6 <_svfiprintf_r+0x186>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	3402      	adds	r4, #2
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9203      	str	r2, [sp, #12]
 800495a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a18 <_svfiprintf_r+0x1e8>
 8004964:	2203      	movs	r2, #3
 8004966:	4650      	mov	r0, sl
 8004968:	7821      	ldrb	r1, [r4, #0]
 800496a:	f7ff f8a4 	bl	8003ab6 <memchr>
 800496e:	b138      	cbz	r0, 8004980 <_svfiprintf_r+0x150>
 8004970:	2240      	movs	r2, #64	@ 0x40
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	eba0 000a 	sub.w	r0, r0, sl
 8004978:	4082      	lsls	r2, r0
 800497a:	4313      	orrs	r3, r2
 800497c:	3401      	adds	r4, #1
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004984:	2206      	movs	r2, #6
 8004986:	4825      	ldr	r0, [pc, #148]	@ (8004a1c <_svfiprintf_r+0x1ec>)
 8004988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800498c:	f7ff f893 	bl	8003ab6 <memchr>
 8004990:	2800      	cmp	r0, #0
 8004992:	d036      	beq.n	8004a02 <_svfiprintf_r+0x1d2>
 8004994:	4b22      	ldr	r3, [pc, #136]	@ (8004a20 <_svfiprintf_r+0x1f0>)
 8004996:	bb1b      	cbnz	r3, 80049e0 <_svfiprintf_r+0x1b0>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	3307      	adds	r3, #7
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	3308      	adds	r3, #8
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a6:	4433      	add	r3, r6
 80049a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049aa:	e76a      	b.n	8004882 <_svfiprintf_r+0x52>
 80049ac:	460c      	mov	r4, r1
 80049ae:	2001      	movs	r0, #1
 80049b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b4:	e7a8      	b.n	8004908 <_svfiprintf_r+0xd8>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f04f 0c0a 	mov.w	ip, #10
 80049bc:	4619      	mov	r1, r3
 80049be:	3401      	adds	r4, #1
 80049c0:	9305      	str	r3, [sp, #20]
 80049c2:	4620      	mov	r0, r4
 80049c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c8:	3a30      	subs	r2, #48	@ 0x30
 80049ca:	2a09      	cmp	r2, #9
 80049cc:	d903      	bls.n	80049d6 <_svfiprintf_r+0x1a6>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0c6      	beq.n	8004960 <_svfiprintf_r+0x130>
 80049d2:	9105      	str	r1, [sp, #20]
 80049d4:	e7c4      	b.n	8004960 <_svfiprintf_r+0x130>
 80049d6:	4604      	mov	r4, r0
 80049d8:	2301      	movs	r3, #1
 80049da:	fb0c 2101 	mla	r1, ip, r1, r2
 80049de:	e7f0      	b.n	80049c2 <_svfiprintf_r+0x192>
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4638      	mov	r0, r7
 80049e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <_svfiprintf_r+0x1f4>)
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	f7fe fb8a 	bl	8003104 <_printf_float>
 80049f0:	1c42      	adds	r2, r0, #1
 80049f2:	4606      	mov	r6, r0
 80049f4:	d1d6      	bne.n	80049a4 <_svfiprintf_r+0x174>
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	065b      	lsls	r3, r3, #25
 80049fa:	f53f af2d 	bmi.w	8004858 <_svfiprintf_r+0x28>
 80049fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a00:	e72c      	b.n	800485c <_svfiprintf_r+0x2c>
 8004a02:	ab03      	add	r3, sp, #12
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	462a      	mov	r2, r5
 8004a08:	4638      	mov	r0, r7
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <_svfiprintf_r+0x1f4>)
 8004a0c:	a904      	add	r1, sp, #16
 8004a0e:	f7fe fe17 	bl	8003640 <_printf_i>
 8004a12:	e7ed      	b.n	80049f0 <_svfiprintf_r+0x1c0>
 8004a14:	08005d7f 	.word	0x08005d7f
 8004a18:	08005d85 	.word	0x08005d85
 8004a1c:	08005d89 	.word	0x08005d89
 8004a20:	08003105 	.word	0x08003105
 8004a24:	08004779 	.word	0x08004779

08004a28 <malloc>:
 8004a28:	4b02      	ldr	r3, [pc, #8]	@ (8004a34 <malloc+0xc>)
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f000 b825 	b.w	8004a7c <_malloc_r>
 8004a32:	bf00      	nop
 8004a34:	20000018 	.word	0x20000018

08004a38 <sbrk_aligned>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a78 <sbrk_aligned+0x40>)
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	6831      	ldr	r1, [r6, #0]
 8004a40:	4605      	mov	r5, r0
 8004a42:	b911      	cbnz	r1, 8004a4a <sbrk_aligned+0x12>
 8004a44:	f000 fd8e 	bl	8005564 <_sbrk_r>
 8004a48:	6030      	str	r0, [r6, #0]
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 fd89 	bl	8005564 <_sbrk_r>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	d103      	bne.n	8004a5e <sbrk_aligned+0x26>
 8004a56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	1cc4      	adds	r4, r0, #3
 8004a60:	f024 0403 	bic.w	r4, r4, #3
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d0f8      	beq.n	8004a5a <sbrk_aligned+0x22>
 8004a68:	1a21      	subs	r1, r4, r0
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 fd7a 	bl	8005564 <_sbrk_r>
 8004a70:	3001      	adds	r0, #1
 8004a72:	d1f2      	bne.n	8004a5a <sbrk_aligned+0x22>
 8004a74:	e7ef      	b.n	8004a56 <sbrk_aligned+0x1e>
 8004a76:	bf00      	nop
 8004a78:	20000400 	.word	0x20000400

08004a7c <_malloc_r>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	1ccd      	adds	r5, r1, #3
 8004a82:	f025 0503 	bic.w	r5, r5, #3
 8004a86:	3508      	adds	r5, #8
 8004a88:	2d0c      	cmp	r5, #12
 8004a8a:	bf38      	it	cc
 8004a8c:	250c      	movcc	r5, #12
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	4606      	mov	r6, r0
 8004a92:	db01      	blt.n	8004a98 <_malloc_r+0x1c>
 8004a94:	42a9      	cmp	r1, r5
 8004a96:	d904      	bls.n	8004aa2 <_malloc_r+0x26>
 8004a98:	230c      	movs	r3, #12
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b78 <_malloc_r+0xfc>
 8004aa6:	f000 f911 	bl	8004ccc <__malloc_lock>
 8004aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8004aae:	461c      	mov	r4, r3
 8004ab0:	bb44      	cbnz	r4, 8004b04 <_malloc_r+0x88>
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff ffbf 	bl	8004a38 <sbrk_aligned>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	4604      	mov	r4, r0
 8004abe:	d158      	bne.n	8004b72 <_malloc_r+0xf6>
 8004ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ac4:	4627      	mov	r7, r4
 8004ac6:	2f00      	cmp	r7, #0
 8004ac8:	d143      	bne.n	8004b52 <_malloc_r+0xd6>
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	d04b      	beq.n	8004b66 <_malloc_r+0xea>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	eb04 0903 	add.w	r9, r4, r3
 8004ad8:	f000 fd44 	bl	8005564 <_sbrk_r>
 8004adc:	4581      	cmp	r9, r0
 8004ade:	d142      	bne.n	8004b66 <_malloc_r+0xea>
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	1a6d      	subs	r5, r5, r1
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7ff ffa6 	bl	8004a38 <sbrk_aligned>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d03a      	beq.n	8004b66 <_malloc_r+0xea>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	442b      	add	r3, r5
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	f8d8 3000 	ldr.w	r3, [r8]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	bb62      	cbnz	r2, 8004b58 <_malloc_r+0xdc>
 8004afe:	f8c8 7000 	str.w	r7, [r8]
 8004b02:	e00f      	b.n	8004b24 <_malloc_r+0xa8>
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	1b52      	subs	r2, r2, r5
 8004b08:	d420      	bmi.n	8004b4c <_malloc_r+0xd0>
 8004b0a:	2a0b      	cmp	r2, #11
 8004b0c:	d917      	bls.n	8004b3e <_malloc_r+0xc2>
 8004b0e:	1961      	adds	r1, r4, r5
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	6025      	str	r5, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	6059      	strne	r1, [r3, #4]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	bf08      	it	eq
 8004b1c:	f8c8 1000 	streq.w	r1, [r8]
 8004b20:	5162      	str	r2, [r4, r5]
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f8d7 	bl	8004cd8 <__malloc_unlock>
 8004b2a:	f104 000b 	add.w	r0, r4, #11
 8004b2e:	1d23      	adds	r3, r4, #4
 8004b30:	f020 0007 	bic.w	r0, r0, #7
 8004b34:	1ac2      	subs	r2, r0, r3
 8004b36:	bf1c      	itt	ne
 8004b38:	1a1b      	subne	r3, r3, r0
 8004b3a:	50a3      	strne	r3, [r4, r2]
 8004b3c:	e7af      	b.n	8004a9e <_malloc_r+0x22>
 8004b3e:	6862      	ldr	r2, [r4, #4]
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	bf0c      	ite	eq
 8004b44:	f8c8 2000 	streq.w	r2, [r8]
 8004b48:	605a      	strne	r2, [r3, #4]
 8004b4a:	e7eb      	b.n	8004b24 <_malloc_r+0xa8>
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	6864      	ldr	r4, [r4, #4]
 8004b50:	e7ae      	b.n	8004ab0 <_malloc_r+0x34>
 8004b52:	463c      	mov	r4, r7
 8004b54:	687f      	ldr	r7, [r7, #4]
 8004b56:	e7b6      	b.n	8004ac6 <_malloc_r+0x4a>
 8004b58:	461a      	mov	r2, r3
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d1fb      	bne.n	8004b58 <_malloc_r+0xdc>
 8004b60:	2300      	movs	r3, #0
 8004b62:	6053      	str	r3, [r2, #4]
 8004b64:	e7de      	b.n	8004b24 <_malloc_r+0xa8>
 8004b66:	230c      	movs	r3, #12
 8004b68:	4630      	mov	r0, r6
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f000 f8b4 	bl	8004cd8 <__malloc_unlock>
 8004b70:	e794      	b.n	8004a9c <_malloc_r+0x20>
 8004b72:	6005      	str	r5, [r0, #0]
 8004b74:	e7d6      	b.n	8004b24 <_malloc_r+0xa8>
 8004b76:	bf00      	nop
 8004b78:	20000404 	.word	0x20000404

08004b7c <__sflush_r>:
 8004b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	0716      	lsls	r6, r2, #28
 8004b84:	4605      	mov	r5, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	d454      	bmi.n	8004c34 <__sflush_r+0xb8>
 8004b8a:	684b      	ldr	r3, [r1, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dc02      	bgt.n	8004b96 <__sflush_r+0x1a>
 8004b90:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dd48      	ble.n	8004c28 <__sflush_r+0xac>
 8004b96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d045      	beq.n	8004c28 <__sflush_r+0xac>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ba2:	682f      	ldr	r7, [r5, #0]
 8004ba4:	6a21      	ldr	r1, [r4, #32]
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	d030      	beq.n	8004c0c <__sflush_r+0x90>
 8004baa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	0759      	lsls	r1, r3, #29
 8004bb0:	d505      	bpl.n	8004bbe <__sflush_r+0x42>
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bb8:	b10b      	cbz	r3, 8004bbe <__sflush_r+0x42>
 8004bba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bbc:	1ad2      	subs	r2, r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bc4:	6a21      	ldr	r1, [r4, #32]
 8004bc6:	47b0      	blx	r6
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	d106      	bne.n	8004bdc <__sflush_r+0x60>
 8004bce:	6829      	ldr	r1, [r5, #0]
 8004bd0:	291d      	cmp	r1, #29
 8004bd2:	d82b      	bhi.n	8004c2c <__sflush_r+0xb0>
 8004bd4:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <__sflush_r+0xfc>)
 8004bd6:	410a      	asrs	r2, r1
 8004bd8:	07d6      	lsls	r6, r2, #31
 8004bda:	d427      	bmi.n	8004c2c <__sflush_r+0xb0>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	6062      	str	r2, [r4, #4]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	04d9      	lsls	r1, r3, #19
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	d504      	bpl.n	8004bf2 <__sflush_r+0x76>
 8004be8:	1c42      	adds	r2, r0, #1
 8004bea:	d101      	bne.n	8004bf0 <__sflush_r+0x74>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b903      	cbnz	r3, 8004bf2 <__sflush_r+0x76>
 8004bf0:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bf4:	602f      	str	r7, [r5, #0]
 8004bf6:	b1b9      	cbz	r1, 8004c28 <__sflush_r+0xac>
 8004bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d002      	beq.n	8004c06 <__sflush_r+0x8a>
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 fd11 	bl	8005628 <_free_r>
 8004c06:	2300      	movs	r3, #0
 8004c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c0a:	e00d      	b.n	8004c28 <__sflush_r+0xac>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b0      	blx	r6
 8004c12:	4602      	mov	r2, r0
 8004c14:	1c50      	adds	r0, r2, #1
 8004c16:	d1c9      	bne.n	8004bac <__sflush_r+0x30>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0c6      	beq.n	8004bac <__sflush_r+0x30>
 8004c1e:	2b1d      	cmp	r3, #29
 8004c20:	d001      	beq.n	8004c26 <__sflush_r+0xaa>
 8004c22:	2b16      	cmp	r3, #22
 8004c24:	d11d      	bne.n	8004c62 <__sflush_r+0xe6>
 8004c26:	602f      	str	r7, [r5, #0]
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e021      	b.n	8004c70 <__sflush_r+0xf4>
 8004c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c30:	b21b      	sxth	r3, r3
 8004c32:	e01a      	b.n	8004c6a <__sflush_r+0xee>
 8004c34:	690f      	ldr	r7, [r1, #16]
 8004c36:	2f00      	cmp	r7, #0
 8004c38:	d0f6      	beq.n	8004c28 <__sflush_r+0xac>
 8004c3a:	0793      	lsls	r3, r2, #30
 8004c3c:	bf18      	it	ne
 8004c3e:	2300      	movne	r3, #0
 8004c40:	680e      	ldr	r6, [r1, #0]
 8004c42:	bf08      	it	eq
 8004c44:	694b      	ldreq	r3, [r1, #20]
 8004c46:	1bf6      	subs	r6, r6, r7
 8004c48:	600f      	str	r7, [r1, #0]
 8004c4a:	608b      	str	r3, [r1, #8]
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	ddeb      	ble.n	8004c28 <__sflush_r+0xac>
 8004c50:	4633      	mov	r3, r6
 8004c52:	463a      	mov	r2, r7
 8004c54:	4628      	mov	r0, r5
 8004c56:	6a21      	ldr	r1, [r4, #32]
 8004c58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c5c:	47e0      	blx	ip
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	dc07      	bgt.n	8004c72 <__sflush_r+0xf6>
 8004c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c72:	4407      	add	r7, r0
 8004c74:	1a36      	subs	r6, r6, r0
 8004c76:	e7e9      	b.n	8004c4c <__sflush_r+0xd0>
 8004c78:	dfbffffe 	.word	0xdfbffffe

08004c7c <_fflush_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	690b      	ldr	r3, [r1, #16]
 8004c80:	4605      	mov	r5, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	b913      	cbnz	r3, 8004c8c <_fflush_r+0x10>
 8004c86:	2500      	movs	r5, #0
 8004c88:	4628      	mov	r0, r5
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	b118      	cbz	r0, 8004c96 <_fflush_r+0x1a>
 8004c8e:	6a03      	ldr	r3, [r0, #32]
 8004c90:	b90b      	cbnz	r3, 8004c96 <_fflush_r+0x1a>
 8004c92:	f7fe fea1 	bl	80039d8 <__sinit>
 8004c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f3      	beq.n	8004c86 <_fflush_r+0xa>
 8004c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ca0:	07d0      	lsls	r0, r2, #31
 8004ca2:	d404      	bmi.n	8004cae <_fflush_r+0x32>
 8004ca4:	0599      	lsls	r1, r3, #22
 8004ca6:	d402      	bmi.n	8004cae <_fflush_r+0x32>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004caa:	f7fe ff02 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 8004cae:	4628      	mov	r0, r5
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f7ff ff63 	bl	8004b7c <__sflush_r>
 8004cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cb8:	4605      	mov	r5, r0
 8004cba:	07da      	lsls	r2, r3, #31
 8004cbc:	d4e4      	bmi.n	8004c88 <_fflush_r+0xc>
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	059b      	lsls	r3, r3, #22
 8004cc2:	d4e1      	bmi.n	8004c88 <_fflush_r+0xc>
 8004cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cc6:	f7fe fef5 	bl	8003ab4 <__retarget_lock_release_recursive>
 8004cca:	e7dd      	b.n	8004c88 <_fflush_r+0xc>

08004ccc <__malloc_lock>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	@ (8004cd4 <__malloc_lock+0x8>)
 8004cce:	f7fe bef0 	b.w	8003ab2 <__retarget_lock_acquire_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	200003fc 	.word	0x200003fc

08004cd8 <__malloc_unlock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	@ (8004ce0 <__malloc_unlock+0x8>)
 8004cda:	f7fe beeb 	b.w	8003ab4 <__retarget_lock_release_recursive>
 8004cde:	bf00      	nop
 8004ce0:	200003fc 	.word	0x200003fc

08004ce4 <_Balloc>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	69c6      	ldr	r6, [r0, #28]
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	b976      	cbnz	r6, 8004d0c <_Balloc+0x28>
 8004cee:	2010      	movs	r0, #16
 8004cf0:	f7ff fe9a 	bl	8004a28 <malloc>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	61e0      	str	r0, [r4, #28]
 8004cf8:	b920      	cbnz	r0, 8004d04 <_Balloc+0x20>
 8004cfa:	216b      	movs	r1, #107	@ 0x6b
 8004cfc:	4b17      	ldr	r3, [pc, #92]	@ (8004d5c <_Balloc+0x78>)
 8004cfe:	4818      	ldr	r0, [pc, #96]	@ (8004d60 <_Balloc+0x7c>)
 8004d00:	f000 fc60 	bl	80055c4 <__assert_func>
 8004d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d08:	6006      	str	r6, [r0, #0]
 8004d0a:	60c6      	str	r6, [r0, #12]
 8004d0c:	69e6      	ldr	r6, [r4, #28]
 8004d0e:	68f3      	ldr	r3, [r6, #12]
 8004d10:	b183      	cbz	r3, 8004d34 <_Balloc+0x50>
 8004d12:	69e3      	ldr	r3, [r4, #28]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d1a:	b9b8      	cbnz	r0, 8004d4c <_Balloc+0x68>
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d22:	1d72      	adds	r2, r6, #5
 8004d24:	4620      	mov	r0, r4
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	f000 fc6a 	bl	8005600 <_calloc_r>
 8004d2c:	b160      	cbz	r0, 8004d48 <_Balloc+0x64>
 8004d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d32:	e00e      	b.n	8004d52 <_Balloc+0x6e>
 8004d34:	2221      	movs	r2, #33	@ 0x21
 8004d36:	2104      	movs	r1, #4
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fc61 	bl	8005600 <_calloc_r>
 8004d3e:	69e3      	ldr	r3, [r4, #28]
 8004d40:	60f0      	str	r0, [r6, #12]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e4      	bne.n	8004d12 <_Balloc+0x2e>
 8004d48:	2000      	movs	r0, #0
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	6802      	ldr	r2, [r0, #0]
 8004d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d52:	2300      	movs	r3, #0
 8004d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d58:	e7f7      	b.n	8004d4a <_Balloc+0x66>
 8004d5a:	bf00      	nop
 8004d5c:	08005cff 	.word	0x08005cff
 8004d60:	08005d90 	.word	0x08005d90

08004d64 <_Bfree>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	69c6      	ldr	r6, [r0, #28]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b976      	cbnz	r6, 8004d8c <_Bfree+0x28>
 8004d6e:	2010      	movs	r0, #16
 8004d70:	f7ff fe5a 	bl	8004a28 <malloc>
 8004d74:	4602      	mov	r2, r0
 8004d76:	61e8      	str	r0, [r5, #28]
 8004d78:	b920      	cbnz	r0, 8004d84 <_Bfree+0x20>
 8004d7a:	218f      	movs	r1, #143	@ 0x8f
 8004d7c:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <_Bfree+0x3c>)
 8004d7e:	4809      	ldr	r0, [pc, #36]	@ (8004da4 <_Bfree+0x40>)
 8004d80:	f000 fc20 	bl	80055c4 <__assert_func>
 8004d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d88:	6006      	str	r6, [r0, #0]
 8004d8a:	60c6      	str	r6, [r0, #12]
 8004d8c:	b13c      	cbz	r4, 8004d9e <_Bfree+0x3a>
 8004d8e:	69eb      	ldr	r3, [r5, #28]
 8004d90:	6862      	ldr	r2, [r4, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d98:	6021      	str	r1, [r4, #0]
 8004d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	08005cff 	.word	0x08005cff
 8004da4:	08005d90 	.word	0x08005d90

08004da8 <__multadd>:
 8004da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dac:	4607      	mov	r7, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	461e      	mov	r6, r3
 8004db2:	2000      	movs	r0, #0
 8004db4:	690d      	ldr	r5, [r1, #16]
 8004db6:	f101 0c14 	add.w	ip, r1, #20
 8004dba:	f8dc 3000 	ldr.w	r3, [ip]
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	fb02 6101 	mla	r1, r2, r1, r6
 8004dc6:	0c1e      	lsrs	r6, r3, #16
 8004dc8:	0c0b      	lsrs	r3, r1, #16
 8004dca:	fb02 3306 	mla	r3, r2, r6, r3
 8004dce:	b289      	uxth	r1, r1
 8004dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004dd4:	4285      	cmp	r5, r0
 8004dd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004dda:	f84c 1b04 	str.w	r1, [ip], #4
 8004dde:	dcec      	bgt.n	8004dba <__multadd+0x12>
 8004de0:	b30e      	cbz	r6, 8004e26 <__multadd+0x7e>
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dc19      	bgt.n	8004e1c <__multadd+0x74>
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	4638      	mov	r0, r7
 8004dec:	3101      	adds	r1, #1
 8004dee:	f7ff ff79 	bl	8004ce4 <_Balloc>
 8004df2:	4680      	mov	r8, r0
 8004df4:	b928      	cbnz	r0, 8004e02 <__multadd+0x5a>
 8004df6:	4602      	mov	r2, r0
 8004df8:	21ba      	movs	r1, #186	@ 0xba
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <__multadd+0x84>)
 8004dfc:	480c      	ldr	r0, [pc, #48]	@ (8004e30 <__multadd+0x88>)
 8004dfe:	f000 fbe1 	bl	80055c4 <__assert_func>
 8004e02:	6922      	ldr	r2, [r4, #16]
 8004e04:	f104 010c 	add.w	r1, r4, #12
 8004e08:	3202      	adds	r2, #2
 8004e0a:	0092      	lsls	r2, r2, #2
 8004e0c:	300c      	adds	r0, #12
 8004e0e:	f000 fbcb 	bl	80055a8 <memcpy>
 8004e12:	4621      	mov	r1, r4
 8004e14:	4638      	mov	r0, r7
 8004e16:	f7ff ffa5 	bl	8004d64 <_Bfree>
 8004e1a:	4644      	mov	r4, r8
 8004e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e20:	3501      	adds	r5, #1
 8004e22:	615e      	str	r6, [r3, #20]
 8004e24:	6125      	str	r5, [r4, #16]
 8004e26:	4620      	mov	r0, r4
 8004e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e2c:	08005d6e 	.word	0x08005d6e
 8004e30:	08005d90 	.word	0x08005d90

08004e34 <__hi0bits>:
 8004e34:	4603      	mov	r3, r0
 8004e36:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e3a:	bf3a      	itte	cc
 8004e3c:	0403      	lslcc	r3, r0, #16
 8004e3e:	2010      	movcc	r0, #16
 8004e40:	2000      	movcs	r0, #0
 8004e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e46:	bf3c      	itt	cc
 8004e48:	021b      	lslcc	r3, r3, #8
 8004e4a:	3008      	addcc	r0, #8
 8004e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e50:	bf3c      	itt	cc
 8004e52:	011b      	lslcc	r3, r3, #4
 8004e54:	3004      	addcc	r0, #4
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5a:	bf3c      	itt	cc
 8004e5c:	009b      	lslcc	r3, r3, #2
 8004e5e:	3002      	addcc	r0, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	db05      	blt.n	8004e70 <__hi0bits+0x3c>
 8004e64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e68:	f100 0001 	add.w	r0, r0, #1
 8004e6c:	bf08      	it	eq
 8004e6e:	2020      	moveq	r0, #32
 8004e70:	4770      	bx	lr

08004e72 <__lo0bits>:
 8004e72:	6803      	ldr	r3, [r0, #0]
 8004e74:	4602      	mov	r2, r0
 8004e76:	f013 0007 	ands.w	r0, r3, #7
 8004e7a:	d00b      	beq.n	8004e94 <__lo0bits+0x22>
 8004e7c:	07d9      	lsls	r1, r3, #31
 8004e7e:	d421      	bmi.n	8004ec4 <__lo0bits+0x52>
 8004e80:	0798      	lsls	r0, r3, #30
 8004e82:	bf49      	itett	mi
 8004e84:	085b      	lsrmi	r3, r3, #1
 8004e86:	089b      	lsrpl	r3, r3, #2
 8004e88:	2001      	movmi	r0, #1
 8004e8a:	6013      	strmi	r3, [r2, #0]
 8004e8c:	bf5c      	itt	pl
 8004e8e:	2002      	movpl	r0, #2
 8004e90:	6013      	strpl	r3, [r2, #0]
 8004e92:	4770      	bx	lr
 8004e94:	b299      	uxth	r1, r3
 8004e96:	b909      	cbnz	r1, 8004e9c <__lo0bits+0x2a>
 8004e98:	2010      	movs	r0, #16
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2d9      	uxtb	r1, r3
 8004e9e:	b909      	cbnz	r1, 8004ea4 <__lo0bits+0x32>
 8004ea0:	3008      	adds	r0, #8
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	bf04      	itt	eq
 8004ea8:	091b      	lsreq	r3, r3, #4
 8004eaa:	3004      	addeq	r0, #4
 8004eac:	0799      	lsls	r1, r3, #30
 8004eae:	bf04      	itt	eq
 8004eb0:	089b      	lsreq	r3, r3, #2
 8004eb2:	3002      	addeq	r0, #2
 8004eb4:	07d9      	lsls	r1, r3, #31
 8004eb6:	d403      	bmi.n	8004ec0 <__lo0bits+0x4e>
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f100 0001 	add.w	r0, r0, #1
 8004ebe:	d003      	beq.n	8004ec8 <__lo0bits+0x56>
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4770      	bx	lr
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr
 8004ec8:	2020      	movs	r0, #32
 8004eca:	4770      	bx	lr

08004ecc <__i2b>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	460c      	mov	r4, r1
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	f7ff ff07 	bl	8004ce4 <_Balloc>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	b928      	cbnz	r0, 8004ee6 <__i2b+0x1a>
 8004eda:	f240 1145 	movw	r1, #325	@ 0x145
 8004ede:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <__i2b+0x24>)
 8004ee0:	4804      	ldr	r0, [pc, #16]	@ (8004ef4 <__i2b+0x28>)
 8004ee2:	f000 fb6f 	bl	80055c4 <__assert_func>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	6144      	str	r4, [r0, #20]
 8004eea:	6103      	str	r3, [r0, #16]
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	bf00      	nop
 8004ef0:	08005d6e 	.word	0x08005d6e
 8004ef4:	08005d90 	.word	0x08005d90

08004ef8 <__multiply>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	4614      	mov	r4, r2
 8004efe:	690a      	ldr	r2, [r1, #16]
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	460f      	mov	r7, r1
 8004f04:	429a      	cmp	r2, r3
 8004f06:	bfa2      	ittt	ge
 8004f08:	4623      	movge	r3, r4
 8004f0a:	460c      	movge	r4, r1
 8004f0c:	461f      	movge	r7, r3
 8004f0e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f12:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	6861      	ldr	r1, [r4, #4]
 8004f1a:	eb0a 0609 	add.w	r6, sl, r9
 8004f1e:	42b3      	cmp	r3, r6
 8004f20:	b085      	sub	sp, #20
 8004f22:	bfb8      	it	lt
 8004f24:	3101      	addlt	r1, #1
 8004f26:	f7ff fedd 	bl	8004ce4 <_Balloc>
 8004f2a:	b930      	cbnz	r0, 8004f3a <__multiply+0x42>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f32:	4b43      	ldr	r3, [pc, #268]	@ (8005040 <__multiply+0x148>)
 8004f34:	4843      	ldr	r0, [pc, #268]	@ (8005044 <__multiply+0x14c>)
 8004f36:	f000 fb45 	bl	80055c4 <__assert_func>
 8004f3a:	f100 0514 	add.w	r5, r0, #20
 8004f3e:	462b      	mov	r3, r5
 8004f40:	2200      	movs	r2, #0
 8004f42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f46:	4543      	cmp	r3, r8
 8004f48:	d321      	bcc.n	8004f8e <__multiply+0x96>
 8004f4a:	f107 0114 	add.w	r1, r7, #20
 8004f4e:	f104 0214 	add.w	r2, r4, #20
 8004f52:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f56:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	1b13      	subs	r3, r2, r4
 8004f5e:	3b15      	subs	r3, #21
 8004f60:	f023 0303 	bic.w	r3, r3, #3
 8004f64:	3304      	adds	r3, #4
 8004f66:	f104 0715 	add.w	r7, r4, #21
 8004f6a:	42ba      	cmp	r2, r7
 8004f6c:	bf38      	it	cc
 8004f6e:	2304      	movcc	r3, #4
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	9b02      	ldr	r3, [sp, #8]
 8004f74:	9103      	str	r1, [sp, #12]
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d80c      	bhi.n	8004f94 <__multiply+0x9c>
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	dd03      	ble.n	8004f86 <__multiply+0x8e>
 8004f7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d05a      	beq.n	800503c <__multiply+0x144>
 8004f86:	6106      	str	r6, [r0, #16]
 8004f88:	b005      	add	sp, #20
 8004f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8e:	f843 2b04 	str.w	r2, [r3], #4
 8004f92:	e7d8      	b.n	8004f46 <__multiply+0x4e>
 8004f94:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f98:	f1ba 0f00 	cmp.w	sl, #0
 8004f9c:	d023      	beq.n	8004fe6 <__multiply+0xee>
 8004f9e:	46a9      	mov	r9, r5
 8004fa0:	f04f 0c00 	mov.w	ip, #0
 8004fa4:	f104 0e14 	add.w	lr, r4, #20
 8004fa8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004fac:	f8d9 3000 	ldr.w	r3, [r9]
 8004fb0:	fa1f fb87 	uxth.w	fp, r7
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	fb0a 330b 	mla	r3, sl, fp, r3
 8004fba:	4463      	add	r3, ip
 8004fbc:	f8d9 c000 	ldr.w	ip, [r9]
 8004fc0:	0c3f      	lsrs	r7, r7, #16
 8004fc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004fc6:	fb0a c707 	mla	r7, sl, r7, ip
 8004fca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004fd4:	4572      	cmp	r2, lr
 8004fd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004fda:	f849 3b04 	str.w	r3, [r9], #4
 8004fde:	d8e3      	bhi.n	8004fa8 <__multiply+0xb0>
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	f845 c003 	str.w	ip, [r5, r3]
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	3104      	adds	r1, #4
 8004fea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004fee:	f1b9 0f00 	cmp.w	r9, #0
 8004ff2:	d021      	beq.n	8005038 <__multiply+0x140>
 8004ff4:	46ae      	mov	lr, r5
 8004ff6:	f04f 0a00 	mov.w	sl, #0
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	f104 0c14 	add.w	ip, r4, #20
 8005000:	f8bc b000 	ldrh.w	fp, [ip]
 8005004:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005008:	b29b      	uxth	r3, r3
 800500a:	fb09 770b 	mla	r7, r9, fp, r7
 800500e:	4457      	add	r7, sl
 8005010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005014:	f84e 3b04 	str.w	r3, [lr], #4
 8005018:	f85c 3b04 	ldr.w	r3, [ip], #4
 800501c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005020:	f8be 3000 	ldrh.w	r3, [lr]
 8005024:	4562      	cmp	r2, ip
 8005026:	fb09 330a 	mla	r3, r9, sl, r3
 800502a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800502e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005032:	d8e5      	bhi.n	8005000 <__multiply+0x108>
 8005034:	9f01      	ldr	r7, [sp, #4]
 8005036:	51eb      	str	r3, [r5, r7]
 8005038:	3504      	adds	r5, #4
 800503a:	e79a      	b.n	8004f72 <__multiply+0x7a>
 800503c:	3e01      	subs	r6, #1
 800503e:	e79c      	b.n	8004f7a <__multiply+0x82>
 8005040:	08005d6e 	.word	0x08005d6e
 8005044:	08005d90 	.word	0x08005d90

08005048 <__pow5mult>:
 8005048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800504c:	4615      	mov	r5, r2
 800504e:	f012 0203 	ands.w	r2, r2, #3
 8005052:	4607      	mov	r7, r0
 8005054:	460e      	mov	r6, r1
 8005056:	d007      	beq.n	8005068 <__pow5mult+0x20>
 8005058:	4c25      	ldr	r4, [pc, #148]	@ (80050f0 <__pow5mult+0xa8>)
 800505a:	3a01      	subs	r2, #1
 800505c:	2300      	movs	r3, #0
 800505e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005062:	f7ff fea1 	bl	8004da8 <__multadd>
 8005066:	4606      	mov	r6, r0
 8005068:	10ad      	asrs	r5, r5, #2
 800506a:	d03d      	beq.n	80050e8 <__pow5mult+0xa0>
 800506c:	69fc      	ldr	r4, [r7, #28]
 800506e:	b97c      	cbnz	r4, 8005090 <__pow5mult+0x48>
 8005070:	2010      	movs	r0, #16
 8005072:	f7ff fcd9 	bl	8004a28 <malloc>
 8005076:	4602      	mov	r2, r0
 8005078:	61f8      	str	r0, [r7, #28]
 800507a:	b928      	cbnz	r0, 8005088 <__pow5mult+0x40>
 800507c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005080:	4b1c      	ldr	r3, [pc, #112]	@ (80050f4 <__pow5mult+0xac>)
 8005082:	481d      	ldr	r0, [pc, #116]	@ (80050f8 <__pow5mult+0xb0>)
 8005084:	f000 fa9e 	bl	80055c4 <__assert_func>
 8005088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800508c:	6004      	str	r4, [r0, #0]
 800508e:	60c4      	str	r4, [r0, #12]
 8005090:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005098:	b94c      	cbnz	r4, 80050ae <__pow5mult+0x66>
 800509a:	f240 2171 	movw	r1, #625	@ 0x271
 800509e:	4638      	mov	r0, r7
 80050a0:	f7ff ff14 	bl	8004ecc <__i2b>
 80050a4:	2300      	movs	r3, #0
 80050a6:	4604      	mov	r4, r0
 80050a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	f04f 0900 	mov.w	r9, #0
 80050b2:	07eb      	lsls	r3, r5, #31
 80050b4:	d50a      	bpl.n	80050cc <__pow5mult+0x84>
 80050b6:	4631      	mov	r1, r6
 80050b8:	4622      	mov	r2, r4
 80050ba:	4638      	mov	r0, r7
 80050bc:	f7ff ff1c 	bl	8004ef8 <__multiply>
 80050c0:	4680      	mov	r8, r0
 80050c2:	4631      	mov	r1, r6
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff fe4d 	bl	8004d64 <_Bfree>
 80050ca:	4646      	mov	r6, r8
 80050cc:	106d      	asrs	r5, r5, #1
 80050ce:	d00b      	beq.n	80050e8 <__pow5mult+0xa0>
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	b938      	cbnz	r0, 80050e4 <__pow5mult+0x9c>
 80050d4:	4622      	mov	r2, r4
 80050d6:	4621      	mov	r1, r4
 80050d8:	4638      	mov	r0, r7
 80050da:	f7ff ff0d 	bl	8004ef8 <__multiply>
 80050de:	6020      	str	r0, [r4, #0]
 80050e0:	f8c0 9000 	str.w	r9, [r0]
 80050e4:	4604      	mov	r4, r0
 80050e6:	e7e4      	b.n	80050b2 <__pow5mult+0x6a>
 80050e8:	4630      	mov	r0, r6
 80050ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ee:	bf00      	nop
 80050f0:	08005dec 	.word	0x08005dec
 80050f4:	08005cff 	.word	0x08005cff
 80050f8:	08005d90 	.word	0x08005d90

080050fc <__lshift>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	460c      	mov	r4, r1
 8005102:	4607      	mov	r7, r0
 8005104:	4691      	mov	r9, r2
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	6849      	ldr	r1, [r1, #4]
 800510a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800510e:	68a3      	ldr	r3, [r4, #8]
 8005110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005114:	f108 0601 	add.w	r6, r8, #1
 8005118:	42b3      	cmp	r3, r6
 800511a:	db0b      	blt.n	8005134 <__lshift+0x38>
 800511c:	4638      	mov	r0, r7
 800511e:	f7ff fde1 	bl	8004ce4 <_Balloc>
 8005122:	4605      	mov	r5, r0
 8005124:	b948      	cbnz	r0, 800513a <__lshift+0x3e>
 8005126:	4602      	mov	r2, r0
 8005128:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800512c:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <__lshift+0xd0>)
 800512e:	4828      	ldr	r0, [pc, #160]	@ (80051d0 <__lshift+0xd4>)
 8005130:	f000 fa48 	bl	80055c4 <__assert_func>
 8005134:	3101      	adds	r1, #1
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	e7ee      	b.n	8005118 <__lshift+0x1c>
 800513a:	2300      	movs	r3, #0
 800513c:	f100 0114 	add.w	r1, r0, #20
 8005140:	f100 0210 	add.w	r2, r0, #16
 8005144:	4618      	mov	r0, r3
 8005146:	4553      	cmp	r3, sl
 8005148:	db33      	blt.n	80051b2 <__lshift+0xb6>
 800514a:	6920      	ldr	r0, [r4, #16]
 800514c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005150:	f104 0314 	add.w	r3, r4, #20
 8005154:	f019 091f 	ands.w	r9, r9, #31
 8005158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800515c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005160:	d02b      	beq.n	80051ba <__lshift+0xbe>
 8005162:	468a      	mov	sl, r1
 8005164:	2200      	movs	r2, #0
 8005166:	f1c9 0e20 	rsb	lr, r9, #32
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	fa00 f009 	lsl.w	r0, r0, r9
 8005170:	4310      	orrs	r0, r2
 8005172:	f84a 0b04 	str.w	r0, [sl], #4
 8005176:	f853 2b04 	ldr.w	r2, [r3], #4
 800517a:	459c      	cmp	ip, r3
 800517c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005180:	d8f3      	bhi.n	800516a <__lshift+0x6e>
 8005182:	ebac 0304 	sub.w	r3, ip, r4
 8005186:	3b15      	subs	r3, #21
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	3304      	adds	r3, #4
 800518e:	f104 0015 	add.w	r0, r4, #21
 8005192:	4584      	cmp	ip, r0
 8005194:	bf38      	it	cc
 8005196:	2304      	movcc	r3, #4
 8005198:	50ca      	str	r2, [r1, r3]
 800519a:	b10a      	cbz	r2, 80051a0 <__lshift+0xa4>
 800519c:	f108 0602 	add.w	r6, r8, #2
 80051a0:	3e01      	subs	r6, #1
 80051a2:	4638      	mov	r0, r7
 80051a4:	4621      	mov	r1, r4
 80051a6:	612e      	str	r6, [r5, #16]
 80051a8:	f7ff fddc 	bl	8004d64 <_Bfree>
 80051ac:	4628      	mov	r0, r5
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80051b6:	3301      	adds	r3, #1
 80051b8:	e7c5      	b.n	8005146 <__lshift+0x4a>
 80051ba:	3904      	subs	r1, #4
 80051bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c0:	459c      	cmp	ip, r3
 80051c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80051c6:	d8f9      	bhi.n	80051bc <__lshift+0xc0>
 80051c8:	e7ea      	b.n	80051a0 <__lshift+0xa4>
 80051ca:	bf00      	nop
 80051cc:	08005d6e 	.word	0x08005d6e
 80051d0:	08005d90 	.word	0x08005d90

080051d4 <__mcmp>:
 80051d4:	4603      	mov	r3, r0
 80051d6:	690a      	ldr	r2, [r1, #16]
 80051d8:	6900      	ldr	r0, [r0, #16]
 80051da:	b530      	push	{r4, r5, lr}
 80051dc:	1a80      	subs	r0, r0, r2
 80051de:	d10e      	bne.n	80051fe <__mcmp+0x2a>
 80051e0:	3314      	adds	r3, #20
 80051e2:	3114      	adds	r1, #20
 80051e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80051ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80051f4:	4295      	cmp	r5, r2
 80051f6:	d003      	beq.n	8005200 <__mcmp+0x2c>
 80051f8:	d205      	bcs.n	8005206 <__mcmp+0x32>
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051fe:	bd30      	pop	{r4, r5, pc}
 8005200:	42a3      	cmp	r3, r4
 8005202:	d3f3      	bcc.n	80051ec <__mcmp+0x18>
 8005204:	e7fb      	b.n	80051fe <__mcmp+0x2a>
 8005206:	2001      	movs	r0, #1
 8005208:	e7f9      	b.n	80051fe <__mcmp+0x2a>
	...

0800520c <__mdiff>:
 800520c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	4689      	mov	r9, r1
 8005212:	4606      	mov	r6, r0
 8005214:	4611      	mov	r1, r2
 8005216:	4648      	mov	r0, r9
 8005218:	4614      	mov	r4, r2
 800521a:	f7ff ffdb 	bl	80051d4 <__mcmp>
 800521e:	1e05      	subs	r5, r0, #0
 8005220:	d112      	bne.n	8005248 <__mdiff+0x3c>
 8005222:	4629      	mov	r1, r5
 8005224:	4630      	mov	r0, r6
 8005226:	f7ff fd5d 	bl	8004ce4 <_Balloc>
 800522a:	4602      	mov	r2, r0
 800522c:	b928      	cbnz	r0, 800523a <__mdiff+0x2e>
 800522e:	f240 2137 	movw	r1, #567	@ 0x237
 8005232:	4b3e      	ldr	r3, [pc, #248]	@ (800532c <__mdiff+0x120>)
 8005234:	483e      	ldr	r0, [pc, #248]	@ (8005330 <__mdiff+0x124>)
 8005236:	f000 f9c5 	bl	80055c4 <__assert_func>
 800523a:	2301      	movs	r3, #1
 800523c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005240:	4610      	mov	r0, r2
 8005242:	b003      	add	sp, #12
 8005244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005248:	bfbc      	itt	lt
 800524a:	464b      	movlt	r3, r9
 800524c:	46a1      	movlt	r9, r4
 800524e:	4630      	mov	r0, r6
 8005250:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005254:	bfba      	itte	lt
 8005256:	461c      	movlt	r4, r3
 8005258:	2501      	movlt	r5, #1
 800525a:	2500      	movge	r5, #0
 800525c:	f7ff fd42 	bl	8004ce4 <_Balloc>
 8005260:	4602      	mov	r2, r0
 8005262:	b918      	cbnz	r0, 800526c <__mdiff+0x60>
 8005264:	f240 2145 	movw	r1, #581	@ 0x245
 8005268:	4b30      	ldr	r3, [pc, #192]	@ (800532c <__mdiff+0x120>)
 800526a:	e7e3      	b.n	8005234 <__mdiff+0x28>
 800526c:	f100 0b14 	add.w	fp, r0, #20
 8005270:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005274:	f109 0310 	add.w	r3, r9, #16
 8005278:	60c5      	str	r5, [r0, #12]
 800527a:	f04f 0c00 	mov.w	ip, #0
 800527e:	f109 0514 	add.w	r5, r9, #20
 8005282:	46d9      	mov	r9, fp
 8005284:	6926      	ldr	r6, [r4, #16]
 8005286:	f104 0e14 	add.w	lr, r4, #20
 800528a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800528e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	f85e 0b04 	ldr.w	r0, [lr], #4
 800529a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800529e:	b281      	uxth	r1, r0
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	fa1f f38a 	uxth.w	r3, sl
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	0c00      	lsrs	r0, r0, #16
 80052aa:	4463      	add	r3, ip
 80052ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80052b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80052ba:	4576      	cmp	r6, lr
 80052bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052c0:	f849 3b04 	str.w	r3, [r9], #4
 80052c4:	d8e6      	bhi.n	8005294 <__mdiff+0x88>
 80052c6:	1b33      	subs	r3, r6, r4
 80052c8:	3b15      	subs	r3, #21
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	3415      	adds	r4, #21
 80052d0:	3304      	adds	r3, #4
 80052d2:	42a6      	cmp	r6, r4
 80052d4:	bf38      	it	cc
 80052d6:	2304      	movcc	r3, #4
 80052d8:	441d      	add	r5, r3
 80052da:	445b      	add	r3, fp
 80052dc:	461e      	mov	r6, r3
 80052de:	462c      	mov	r4, r5
 80052e0:	4544      	cmp	r4, r8
 80052e2:	d30e      	bcc.n	8005302 <__mdiff+0xf6>
 80052e4:	f108 0103 	add.w	r1, r8, #3
 80052e8:	1b49      	subs	r1, r1, r5
 80052ea:	f021 0103 	bic.w	r1, r1, #3
 80052ee:	3d03      	subs	r5, #3
 80052f0:	45a8      	cmp	r8, r5
 80052f2:	bf38      	it	cc
 80052f4:	2100      	movcc	r1, #0
 80052f6:	440b      	add	r3, r1
 80052f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80052fc:	b199      	cbz	r1, 8005326 <__mdiff+0x11a>
 80052fe:	6117      	str	r7, [r2, #16]
 8005300:	e79e      	b.n	8005240 <__mdiff+0x34>
 8005302:	46e6      	mov	lr, ip
 8005304:	f854 1b04 	ldr.w	r1, [r4], #4
 8005308:	fa1f fc81 	uxth.w	ip, r1
 800530c:	44f4      	add	ip, lr
 800530e:	0c08      	lsrs	r0, r1, #16
 8005310:	4471      	add	r1, lr
 8005312:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005316:	b289      	uxth	r1, r1
 8005318:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800531c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005320:	f846 1b04 	str.w	r1, [r6], #4
 8005324:	e7dc      	b.n	80052e0 <__mdiff+0xd4>
 8005326:	3f01      	subs	r7, #1
 8005328:	e7e6      	b.n	80052f8 <__mdiff+0xec>
 800532a:	bf00      	nop
 800532c:	08005d6e 	.word	0x08005d6e
 8005330:	08005d90 	.word	0x08005d90

08005334 <__d2b>:
 8005334:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005338:	2101      	movs	r1, #1
 800533a:	4690      	mov	r8, r2
 800533c:	4699      	mov	r9, r3
 800533e:	9e08      	ldr	r6, [sp, #32]
 8005340:	f7ff fcd0 	bl	8004ce4 <_Balloc>
 8005344:	4604      	mov	r4, r0
 8005346:	b930      	cbnz	r0, 8005356 <__d2b+0x22>
 8005348:	4602      	mov	r2, r0
 800534a:	f240 310f 	movw	r1, #783	@ 0x30f
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <__d2b+0xa8>)
 8005350:	4823      	ldr	r0, [pc, #140]	@ (80053e0 <__d2b+0xac>)
 8005352:	f000 f937 	bl	80055c4 <__assert_func>
 8005356:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800535a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800535e:	b10d      	cbz	r5, 8005364 <__d2b+0x30>
 8005360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	f1b8 0300 	subs.w	r3, r8, #0
 800536a:	d024      	beq.n	80053b6 <__d2b+0x82>
 800536c:	4668      	mov	r0, sp
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	f7ff fd7f 	bl	8004e72 <__lo0bits>
 8005374:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005378:	b1d8      	cbz	r0, 80053b2 <__d2b+0x7e>
 800537a:	f1c0 0320 	rsb	r3, r0, #32
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	430b      	orrs	r3, r1
 8005384:	40c2      	lsrs	r2, r0
 8005386:	6163      	str	r3, [r4, #20]
 8005388:	9201      	str	r2, [sp, #4]
 800538a:	9b01      	ldr	r3, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2201      	moveq	r2, #1
 8005392:	2202      	movne	r2, #2
 8005394:	61a3      	str	r3, [r4, #24]
 8005396:	6122      	str	r2, [r4, #16]
 8005398:	b1ad      	cbz	r5, 80053c6 <__d2b+0x92>
 800539a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800539e:	4405      	add	r5, r0
 80053a0:	6035      	str	r5, [r6, #0]
 80053a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a8:	6018      	str	r0, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	b002      	add	sp, #8
 80053ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80053b2:	6161      	str	r1, [r4, #20]
 80053b4:	e7e9      	b.n	800538a <__d2b+0x56>
 80053b6:	a801      	add	r0, sp, #4
 80053b8:	f7ff fd5b 	bl	8004e72 <__lo0bits>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	6163      	str	r3, [r4, #20]
 80053c2:	3020      	adds	r0, #32
 80053c4:	e7e7      	b.n	8005396 <__d2b+0x62>
 80053c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80053ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053ce:	6030      	str	r0, [r6, #0]
 80053d0:	6918      	ldr	r0, [r3, #16]
 80053d2:	f7ff fd2f 	bl	8004e34 <__hi0bits>
 80053d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053da:	e7e4      	b.n	80053a6 <__d2b+0x72>
 80053dc:	08005d6e 	.word	0x08005d6e
 80053e0:	08005d90 	.word	0x08005d90

080053e4 <__sread>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ec:	f000 f8a8 	bl	8005540 <_read_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	bfab      	itete	ge
 80053f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053f6:	89a3      	ldrhlt	r3, [r4, #12]
 80053f8:	181b      	addge	r3, r3, r0
 80053fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053fe:	bfac      	ite	ge
 8005400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005402:	81a3      	strhlt	r3, [r4, #12]
 8005404:	bd10      	pop	{r4, pc}

08005406 <__swrite>:
 8005406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540a:	461f      	mov	r7, r3
 800540c:	898b      	ldrh	r3, [r1, #12]
 800540e:	4605      	mov	r5, r0
 8005410:	05db      	lsls	r3, r3, #23
 8005412:	460c      	mov	r4, r1
 8005414:	4616      	mov	r6, r2
 8005416:	d505      	bpl.n	8005424 <__swrite+0x1e>
 8005418:	2302      	movs	r3, #2
 800541a:	2200      	movs	r2, #0
 800541c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005420:	f000 f87c 	bl	800551c <_lseek_r>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	4632      	mov	r2, r6
 8005428:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	4628      	mov	r0, r5
 8005430:	463b      	mov	r3, r7
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	f000 b8a3 	b.w	8005584 <_write_r>

0800543e <__sseek>:
 800543e:	b510      	push	{r4, lr}
 8005440:	460c      	mov	r4, r1
 8005442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005446:	f000 f869 	bl	800551c <_lseek_r>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	bf15      	itete	ne
 8005450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800545a:	81a3      	strheq	r3, [r4, #12]
 800545c:	bf18      	it	ne
 800545e:	81a3      	strhne	r3, [r4, #12]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__sclose>:
 8005462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005466:	f000 b849 	b.w	80054fc <_close_r>

0800546a <_realloc_r>:
 800546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	4680      	mov	r8, r0
 8005470:	4615      	mov	r5, r2
 8005472:	460c      	mov	r4, r1
 8005474:	b921      	cbnz	r1, 8005480 <_realloc_r+0x16>
 8005476:	4611      	mov	r1, r2
 8005478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	f7ff bafe 	b.w	8004a7c <_malloc_r>
 8005480:	b92a      	cbnz	r2, 800548e <_realloc_r+0x24>
 8005482:	f000 f8d1 	bl	8005628 <_free_r>
 8005486:	2400      	movs	r4, #0
 8005488:	4620      	mov	r0, r4
 800548a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548e:	f000 f925 	bl	80056dc <_malloc_usable_size_r>
 8005492:	4285      	cmp	r5, r0
 8005494:	4606      	mov	r6, r0
 8005496:	d802      	bhi.n	800549e <_realloc_r+0x34>
 8005498:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800549c:	d8f4      	bhi.n	8005488 <_realloc_r+0x1e>
 800549e:	4629      	mov	r1, r5
 80054a0:	4640      	mov	r0, r8
 80054a2:	f7ff faeb 	bl	8004a7c <_malloc_r>
 80054a6:	4607      	mov	r7, r0
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0ec      	beq.n	8005486 <_realloc_r+0x1c>
 80054ac:	42b5      	cmp	r5, r6
 80054ae:	462a      	mov	r2, r5
 80054b0:	4621      	mov	r1, r4
 80054b2:	bf28      	it	cs
 80054b4:	4632      	movcs	r2, r6
 80054b6:	f000 f877 	bl	80055a8 <memcpy>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4640      	mov	r0, r8
 80054be:	f000 f8b3 	bl	8005628 <_free_r>
 80054c2:	463c      	mov	r4, r7
 80054c4:	e7e0      	b.n	8005488 <_realloc_r+0x1e>

080054c6 <memmove>:
 80054c6:	4288      	cmp	r0, r1
 80054c8:	b510      	push	{r4, lr}
 80054ca:	eb01 0402 	add.w	r4, r1, r2
 80054ce:	d902      	bls.n	80054d6 <memmove+0x10>
 80054d0:	4284      	cmp	r4, r0
 80054d2:	4623      	mov	r3, r4
 80054d4:	d807      	bhi.n	80054e6 <memmove+0x20>
 80054d6:	1e43      	subs	r3, r0, #1
 80054d8:	42a1      	cmp	r1, r4
 80054da:	d008      	beq.n	80054ee <memmove+0x28>
 80054dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054e4:	e7f8      	b.n	80054d8 <memmove+0x12>
 80054e6:	4601      	mov	r1, r0
 80054e8:	4402      	add	r2, r0
 80054ea:	428a      	cmp	r2, r1
 80054ec:	d100      	bne.n	80054f0 <memmove+0x2a>
 80054ee:	bd10      	pop	{r4, pc}
 80054f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054f8:	e7f7      	b.n	80054ea <memmove+0x24>
	...

080054fc <_close_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	2300      	movs	r3, #0
 8005500:	4d05      	ldr	r5, [pc, #20]	@ (8005518 <_close_r+0x1c>)
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb ff3f 	bl	800138a <_close>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_close_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_close_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000408 	.word	0x20000408

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	2200      	movs	r2, #0
 8005526:	4d05      	ldr	r5, [pc, #20]	@ (800553c <_lseek_r+0x20>)
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb ff51 	bl	80013d2 <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20000408 	.word	0x20000408

08005540 <_read_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	2200      	movs	r2, #0
 800554a:	4d05      	ldr	r5, [pc, #20]	@ (8005560 <_read_r+0x20>)
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fb fee2 	bl	8001318 <_read>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_read_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_read_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000408 	.word	0x20000408

08005564 <_sbrk_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	2300      	movs	r3, #0
 8005568:	4d05      	ldr	r5, [pc, #20]	@ (8005580 <_sbrk_r+0x1c>)
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	f7fb ff3c 	bl	80013ec <_sbrk>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_sbrk_r+0x1a>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_sbrk_r+0x1a>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	20000408 	.word	0x20000408

08005584 <_write_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	2200      	movs	r2, #0
 800558e:	4d05      	ldr	r5, [pc, #20]	@ (80055a4 <_write_r+0x20>)
 8005590:	602a      	str	r2, [r5, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f7fb fedd 	bl	8001352 <_write>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_write_r+0x1e>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_write_r+0x1e>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20000408 	.word	0x20000408

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	4291      	cmp	r1, r2
 80055bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <__assert_func>:
 80055c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055c6:	4614      	mov	r4, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <__assert_func+0x2c>)
 80055cc:	4605      	mov	r5, r0
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68d8      	ldr	r0, [r3, #12]
 80055d2:	b954      	cbnz	r4, 80055ea <__assert_func+0x26>
 80055d4:	4b07      	ldr	r3, [pc, #28]	@ (80055f4 <__assert_func+0x30>)
 80055d6:	461c      	mov	r4, r3
 80055d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055dc:	9100      	str	r1, [sp, #0]
 80055de:	462b      	mov	r3, r5
 80055e0:	4905      	ldr	r1, [pc, #20]	@ (80055f8 <__assert_func+0x34>)
 80055e2:	f000 f883 	bl	80056ec <fiprintf>
 80055e6:	f000 f8a0 	bl	800572a <abort>
 80055ea:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <__assert_func+0x38>)
 80055ec:	e7f4      	b.n	80055d8 <__assert_func+0x14>
 80055ee:	bf00      	nop
 80055f0:	20000018 	.word	0x20000018
 80055f4:	0800602e 	.word	0x0800602e
 80055f8:	08006000 	.word	0x08006000
 80055fc:	08005ff3 	.word	0x08005ff3

08005600 <_calloc_r>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	fba1 5402 	umull	r5, r4, r1, r2
 8005606:	b93c      	cbnz	r4, 8005618 <_calloc_r+0x18>
 8005608:	4629      	mov	r1, r5
 800560a:	f7ff fa37 	bl	8004a7c <_malloc_r>
 800560e:	4606      	mov	r6, r0
 8005610:	b928      	cbnz	r0, 800561e <_calloc_r+0x1e>
 8005612:	2600      	movs	r6, #0
 8005614:	4630      	mov	r0, r6
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	220c      	movs	r2, #12
 800561a:	6002      	str	r2, [r0, #0]
 800561c:	e7f9      	b.n	8005612 <_calloc_r+0x12>
 800561e:	462a      	mov	r2, r5
 8005620:	4621      	mov	r1, r4
 8005622:	f7fe fa0f 	bl	8003a44 <memset>
 8005626:	e7f5      	b.n	8005614 <_calloc_r+0x14>

08005628 <_free_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	2900      	cmp	r1, #0
 800562e:	d040      	beq.n	80056b2 <_free_r+0x8a>
 8005630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005634:	1f0c      	subs	r4, r1, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfb8      	it	lt
 800563a:	18e4      	addlt	r4, r4, r3
 800563c:	f7ff fb46 	bl	8004ccc <__malloc_lock>
 8005640:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <_free_r+0x8c>)
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	b933      	cbnz	r3, 8005654 <_free_r+0x2c>
 8005646:	6063      	str	r3, [r4, #4]
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	4628      	mov	r0, r5
 800564c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005650:	f7ff bb42 	b.w	8004cd8 <__malloc_unlock>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d908      	bls.n	800566a <_free_r+0x42>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf01      	itttt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	1809      	addeq	r1, r1, r0
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	e7ed      	b.n	8005646 <_free_r+0x1e>
 800566a:	461a      	mov	r2, r3
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b10b      	cbz	r3, 8005674 <_free_r+0x4c>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d9fa      	bls.n	800566a <_free_r+0x42>
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	1850      	adds	r0, r2, r1
 8005678:	42a0      	cmp	r0, r4
 800567a:	d10b      	bne.n	8005694 <_free_r+0x6c>
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	4401      	add	r1, r0
 8005680:	1850      	adds	r0, r2, r1
 8005682:	4283      	cmp	r3, r0
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	d1e0      	bne.n	800564a <_free_r+0x22>
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4408      	add	r0, r1
 800568e:	6010      	str	r0, [r2, #0]
 8005690:	6053      	str	r3, [r2, #4]
 8005692:	e7da      	b.n	800564a <_free_r+0x22>
 8005694:	d902      	bls.n	800569c <_free_r+0x74>
 8005696:	230c      	movs	r3, #12
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	e7d6      	b.n	800564a <_free_r+0x22>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	1821      	adds	r1, r4, r0
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf01      	itttt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	1809      	addeq	r1, r1, r0
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	6054      	str	r4, [r2, #4]
 80056b0:	e7cb      	b.n	800564a <_free_r+0x22>
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20000404 	.word	0x20000404

080056b8 <__ascii_mbtowc>:
 80056b8:	b082      	sub	sp, #8
 80056ba:	b901      	cbnz	r1, 80056be <__ascii_mbtowc+0x6>
 80056bc:	a901      	add	r1, sp, #4
 80056be:	b142      	cbz	r2, 80056d2 <__ascii_mbtowc+0x1a>
 80056c0:	b14b      	cbz	r3, 80056d6 <__ascii_mbtowc+0x1e>
 80056c2:	7813      	ldrb	r3, [r2, #0]
 80056c4:	600b      	str	r3, [r1, #0]
 80056c6:	7812      	ldrb	r2, [r2, #0]
 80056c8:	1e10      	subs	r0, r2, #0
 80056ca:	bf18      	it	ne
 80056cc:	2001      	movne	r0, #1
 80056ce:	b002      	add	sp, #8
 80056d0:	4770      	bx	lr
 80056d2:	4610      	mov	r0, r2
 80056d4:	e7fb      	b.n	80056ce <__ascii_mbtowc+0x16>
 80056d6:	f06f 0001 	mvn.w	r0, #1
 80056da:	e7f8      	b.n	80056ce <__ascii_mbtowc+0x16>

080056dc <_malloc_usable_size_r>:
 80056dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e0:	1f18      	subs	r0, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfbc      	itt	lt
 80056e6:	580b      	ldrlt	r3, [r1, r0]
 80056e8:	18c0      	addlt	r0, r0, r3
 80056ea:	4770      	bx	lr

080056ec <fiprintf>:
 80056ec:	b40e      	push	{r1, r2, r3}
 80056ee:	b503      	push	{r0, r1, lr}
 80056f0:	4601      	mov	r1, r0
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	4805      	ldr	r0, [pc, #20]	@ (800570c <fiprintf+0x20>)
 80056f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	f000 f843 	bl	8005788 <_vfiprintf_r>
 8005702:	b002      	add	sp, #8
 8005704:	f85d eb04 	ldr.w	lr, [sp], #4
 8005708:	b003      	add	sp, #12
 800570a:	4770      	bx	lr
 800570c:	20000018 	.word	0x20000018

08005710 <__ascii_wctomb>:
 8005710:	4603      	mov	r3, r0
 8005712:	4608      	mov	r0, r1
 8005714:	b141      	cbz	r1, 8005728 <__ascii_wctomb+0x18>
 8005716:	2aff      	cmp	r2, #255	@ 0xff
 8005718:	d904      	bls.n	8005724 <__ascii_wctomb+0x14>
 800571a:	228a      	movs	r2, #138	@ 0x8a
 800571c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	4770      	bx	lr
 8005724:	2001      	movs	r0, #1
 8005726:	700a      	strb	r2, [r1, #0]
 8005728:	4770      	bx	lr

0800572a <abort>:
 800572a:	2006      	movs	r0, #6
 800572c:	b508      	push	{r3, lr}
 800572e:	f000 fa83 	bl	8005c38 <raise>
 8005732:	2001      	movs	r0, #1
 8005734:	f7fb fde5 	bl	8001302 <_exit>

08005738 <__sfputc_r>:
 8005738:	6893      	ldr	r3, [r2, #8]
 800573a:	b410      	push	{r4}
 800573c:	3b01      	subs	r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	6093      	str	r3, [r2, #8]
 8005742:	da07      	bge.n	8005754 <__sfputc_r+0x1c>
 8005744:	6994      	ldr	r4, [r2, #24]
 8005746:	42a3      	cmp	r3, r4
 8005748:	db01      	blt.n	800574e <__sfputc_r+0x16>
 800574a:	290a      	cmp	r1, #10
 800574c:	d102      	bne.n	8005754 <__sfputc_r+0x1c>
 800574e:	bc10      	pop	{r4}
 8005750:	f000 b932 	b.w	80059b8 <__swbuf_r>
 8005754:	6813      	ldr	r3, [r2, #0]
 8005756:	1c58      	adds	r0, r3, #1
 8005758:	6010      	str	r0, [r2, #0]
 800575a:	7019      	strb	r1, [r3, #0]
 800575c:	4608      	mov	r0, r1
 800575e:	bc10      	pop	{r4}
 8005760:	4770      	bx	lr

08005762 <__sfputs_r>:
 8005762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005764:	4606      	mov	r6, r0
 8005766:	460f      	mov	r7, r1
 8005768:	4614      	mov	r4, r2
 800576a:	18d5      	adds	r5, r2, r3
 800576c:	42ac      	cmp	r4, r5
 800576e:	d101      	bne.n	8005774 <__sfputs_r+0x12>
 8005770:	2000      	movs	r0, #0
 8005772:	e007      	b.n	8005784 <__sfputs_r+0x22>
 8005774:	463a      	mov	r2, r7
 8005776:	4630      	mov	r0, r6
 8005778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577c:	f7ff ffdc 	bl	8005738 <__sfputc_r>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d1f3      	bne.n	800576c <__sfputs_r+0xa>
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005788 <_vfiprintf_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	460d      	mov	r5, r1
 800578e:	4614      	mov	r4, r2
 8005790:	4698      	mov	r8, r3
 8005792:	4606      	mov	r6, r0
 8005794:	b09d      	sub	sp, #116	@ 0x74
 8005796:	b118      	cbz	r0, 80057a0 <_vfiprintf_r+0x18>
 8005798:	6a03      	ldr	r3, [r0, #32]
 800579a:	b90b      	cbnz	r3, 80057a0 <_vfiprintf_r+0x18>
 800579c:	f7fe f91c 	bl	80039d8 <__sinit>
 80057a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	d405      	bmi.n	80057b2 <_vfiprintf_r+0x2a>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	059a      	lsls	r2, r3, #22
 80057aa:	d402      	bmi.n	80057b2 <_vfiprintf_r+0x2a>
 80057ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ae:	f7fe f980 	bl	8003ab2 <__retarget_lock_acquire_recursive>
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	071b      	lsls	r3, r3, #28
 80057b6:	d501      	bpl.n	80057bc <_vfiprintf_r+0x34>
 80057b8:	692b      	ldr	r3, [r5, #16]
 80057ba:	b99b      	cbnz	r3, 80057e4 <_vfiprintf_r+0x5c>
 80057bc:	4629      	mov	r1, r5
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 f938 	bl	8005a34 <__swsetup_r>
 80057c4:	b170      	cbz	r0, 80057e4 <_vfiprintf_r+0x5c>
 80057c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057c8:	07dc      	lsls	r4, r3, #31
 80057ca:	d504      	bpl.n	80057d6 <_vfiprintf_r+0x4e>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057d0:	b01d      	add	sp, #116	@ 0x74
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	0598      	lsls	r0, r3, #22
 80057da:	d4f7      	bmi.n	80057cc <_vfiprintf_r+0x44>
 80057dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057de:	f7fe f969 	bl	8003ab4 <__retarget_lock_release_recursive>
 80057e2:	e7f3      	b.n	80057cc <_vfiprintf_r+0x44>
 80057e4:	2300      	movs	r3, #0
 80057e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057e8:	2320      	movs	r3, #32
 80057ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057ee:	2330      	movs	r3, #48	@ 0x30
 80057f0:	f04f 0901 	mov.w	r9, #1
 80057f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80059a4 <_vfiprintf_r+0x21c>
 80057fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005800:	4623      	mov	r3, r4
 8005802:	469a      	mov	sl, r3
 8005804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005808:	b10a      	cbz	r2, 800580e <_vfiprintf_r+0x86>
 800580a:	2a25      	cmp	r2, #37	@ 0x25
 800580c:	d1f9      	bne.n	8005802 <_vfiprintf_r+0x7a>
 800580e:	ebba 0b04 	subs.w	fp, sl, r4
 8005812:	d00b      	beq.n	800582c <_vfiprintf_r+0xa4>
 8005814:	465b      	mov	r3, fp
 8005816:	4622      	mov	r2, r4
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ffa1 	bl	8005762 <__sfputs_r>
 8005820:	3001      	adds	r0, #1
 8005822:	f000 80a7 	beq.w	8005974 <_vfiprintf_r+0x1ec>
 8005826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005828:	445a      	add	r2, fp
 800582a:	9209      	str	r2, [sp, #36]	@ 0x24
 800582c:	f89a 3000 	ldrb.w	r3, [sl]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 809f 	beq.w	8005974 <_vfiprintf_r+0x1ec>
 8005836:	2300      	movs	r3, #0
 8005838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800583c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	9307      	str	r3, [sp, #28]
 8005848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800584c:	931a      	str	r3, [sp, #104]	@ 0x68
 800584e:	4654      	mov	r4, sl
 8005850:	2205      	movs	r2, #5
 8005852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005856:	4853      	ldr	r0, [pc, #332]	@ (80059a4 <_vfiprintf_r+0x21c>)
 8005858:	f7fe f92d 	bl	8003ab6 <memchr>
 800585c:	9a04      	ldr	r2, [sp, #16]
 800585e:	b9d8      	cbnz	r0, 8005898 <_vfiprintf_r+0x110>
 8005860:	06d1      	lsls	r1, r2, #27
 8005862:	bf44      	itt	mi
 8005864:	2320      	movmi	r3, #32
 8005866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800586a:	0713      	lsls	r3, r2, #28
 800586c:	bf44      	itt	mi
 800586e:	232b      	movmi	r3, #43	@ 0x2b
 8005870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005874:	f89a 3000 	ldrb.w	r3, [sl]
 8005878:	2b2a      	cmp	r3, #42	@ 0x2a
 800587a:	d015      	beq.n	80058a8 <_vfiprintf_r+0x120>
 800587c:	4654      	mov	r4, sl
 800587e:	2000      	movs	r0, #0
 8005880:	f04f 0c0a 	mov.w	ip, #10
 8005884:	9a07      	ldr	r2, [sp, #28]
 8005886:	4621      	mov	r1, r4
 8005888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800588c:	3b30      	subs	r3, #48	@ 0x30
 800588e:	2b09      	cmp	r3, #9
 8005890:	d94b      	bls.n	800592a <_vfiprintf_r+0x1a2>
 8005892:	b1b0      	cbz	r0, 80058c2 <_vfiprintf_r+0x13a>
 8005894:	9207      	str	r2, [sp, #28]
 8005896:	e014      	b.n	80058c2 <_vfiprintf_r+0x13a>
 8005898:	eba0 0308 	sub.w	r3, r0, r8
 800589c:	fa09 f303 	lsl.w	r3, r9, r3
 80058a0:	4313      	orrs	r3, r2
 80058a2:	46a2      	mov	sl, r4
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	e7d2      	b.n	800584e <_vfiprintf_r+0xc6>
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	1d19      	adds	r1, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9103      	str	r1, [sp, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bfbb      	ittet	lt
 80058b4:	425b      	neglt	r3, r3
 80058b6:	f042 0202 	orrlt.w	r2, r2, #2
 80058ba:	9307      	strge	r3, [sp, #28]
 80058bc:	9307      	strlt	r3, [sp, #28]
 80058be:	bfb8      	it	lt
 80058c0:	9204      	strlt	r2, [sp, #16]
 80058c2:	7823      	ldrb	r3, [r4, #0]
 80058c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80058c6:	d10a      	bne.n	80058de <_vfiprintf_r+0x156>
 80058c8:	7863      	ldrb	r3, [r4, #1]
 80058ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80058cc:	d132      	bne.n	8005934 <_vfiprintf_r+0x1ac>
 80058ce:	9b03      	ldr	r3, [sp, #12]
 80058d0:	3402      	adds	r4, #2
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	9203      	str	r2, [sp, #12]
 80058d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80059a8 <_vfiprintf_r+0x220>
 80058e2:	2203      	movs	r2, #3
 80058e4:	4650      	mov	r0, sl
 80058e6:	7821      	ldrb	r1, [r4, #0]
 80058e8:	f7fe f8e5 	bl	8003ab6 <memchr>
 80058ec:	b138      	cbz	r0, 80058fe <_vfiprintf_r+0x176>
 80058ee:	2240      	movs	r2, #64	@ 0x40
 80058f0:	9b04      	ldr	r3, [sp, #16]
 80058f2:	eba0 000a 	sub.w	r0, r0, sl
 80058f6:	4082      	lsls	r2, r0
 80058f8:	4313      	orrs	r3, r2
 80058fa:	3401      	adds	r4, #1
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005902:	2206      	movs	r2, #6
 8005904:	4829      	ldr	r0, [pc, #164]	@ (80059ac <_vfiprintf_r+0x224>)
 8005906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800590a:	f7fe f8d4 	bl	8003ab6 <memchr>
 800590e:	2800      	cmp	r0, #0
 8005910:	d03f      	beq.n	8005992 <_vfiprintf_r+0x20a>
 8005912:	4b27      	ldr	r3, [pc, #156]	@ (80059b0 <_vfiprintf_r+0x228>)
 8005914:	bb1b      	cbnz	r3, 800595e <_vfiprintf_r+0x1d6>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	3307      	adds	r3, #7
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	3308      	adds	r3, #8
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	443b      	add	r3, r7
 8005926:	9309      	str	r3, [sp, #36]	@ 0x24
 8005928:	e76a      	b.n	8005800 <_vfiprintf_r+0x78>
 800592a:	460c      	mov	r4, r1
 800592c:	2001      	movs	r0, #1
 800592e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005932:	e7a8      	b.n	8005886 <_vfiprintf_r+0xfe>
 8005934:	2300      	movs	r3, #0
 8005936:	f04f 0c0a 	mov.w	ip, #10
 800593a:	4619      	mov	r1, r3
 800593c:	3401      	adds	r4, #1
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	4620      	mov	r0, r4
 8005942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005946:	3a30      	subs	r2, #48	@ 0x30
 8005948:	2a09      	cmp	r2, #9
 800594a:	d903      	bls.n	8005954 <_vfiprintf_r+0x1cc>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0c6      	beq.n	80058de <_vfiprintf_r+0x156>
 8005950:	9105      	str	r1, [sp, #20]
 8005952:	e7c4      	b.n	80058de <_vfiprintf_r+0x156>
 8005954:	4604      	mov	r4, r0
 8005956:	2301      	movs	r3, #1
 8005958:	fb0c 2101 	mla	r1, ip, r1, r2
 800595c:	e7f0      	b.n	8005940 <_vfiprintf_r+0x1b8>
 800595e:	ab03      	add	r3, sp, #12
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	462a      	mov	r2, r5
 8005964:	4630      	mov	r0, r6
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <_vfiprintf_r+0x22c>)
 8005968:	a904      	add	r1, sp, #16
 800596a:	f7fd fbcb 	bl	8003104 <_printf_float>
 800596e:	4607      	mov	r7, r0
 8005970:	1c78      	adds	r0, r7, #1
 8005972:	d1d6      	bne.n	8005922 <_vfiprintf_r+0x19a>
 8005974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005976:	07d9      	lsls	r1, r3, #31
 8005978:	d405      	bmi.n	8005986 <_vfiprintf_r+0x1fe>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	059a      	lsls	r2, r3, #22
 800597e:	d402      	bmi.n	8005986 <_vfiprintf_r+0x1fe>
 8005980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005982:	f7fe f897 	bl	8003ab4 <__retarget_lock_release_recursive>
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	065b      	lsls	r3, r3, #25
 800598a:	f53f af1f 	bmi.w	80057cc <_vfiprintf_r+0x44>
 800598e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005990:	e71e      	b.n	80057d0 <_vfiprintf_r+0x48>
 8005992:	ab03      	add	r3, sp, #12
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	462a      	mov	r2, r5
 8005998:	4630      	mov	r0, r6
 800599a:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <_vfiprintf_r+0x22c>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	f7fd fe4f 	bl	8003640 <_printf_i>
 80059a2:	e7e4      	b.n	800596e <_vfiprintf_r+0x1e6>
 80059a4:	08005d7f 	.word	0x08005d7f
 80059a8:	08005d85 	.word	0x08005d85
 80059ac:	08005d89 	.word	0x08005d89
 80059b0:	08003105 	.word	0x08003105
 80059b4:	08005763 	.word	0x08005763

080059b8 <__swbuf_r>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	460e      	mov	r6, r1
 80059bc:	4614      	mov	r4, r2
 80059be:	4605      	mov	r5, r0
 80059c0:	b118      	cbz	r0, 80059ca <__swbuf_r+0x12>
 80059c2:	6a03      	ldr	r3, [r0, #32]
 80059c4:	b90b      	cbnz	r3, 80059ca <__swbuf_r+0x12>
 80059c6:	f7fe f807 	bl	80039d8 <__sinit>
 80059ca:	69a3      	ldr	r3, [r4, #24]
 80059cc:	60a3      	str	r3, [r4, #8]
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	071a      	lsls	r2, r3, #28
 80059d2:	d501      	bpl.n	80059d8 <__swbuf_r+0x20>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	b943      	cbnz	r3, 80059ea <__swbuf_r+0x32>
 80059d8:	4621      	mov	r1, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f82a 	bl	8005a34 <__swsetup_r>
 80059e0:	b118      	cbz	r0, 80059ea <__swbuf_r+0x32>
 80059e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80059e6:	4638      	mov	r0, r7
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	6922      	ldr	r2, [r4, #16]
 80059ee:	b2f6      	uxtb	r6, r6
 80059f0:	1a98      	subs	r0, r3, r2
 80059f2:	6963      	ldr	r3, [r4, #20]
 80059f4:	4637      	mov	r7, r6
 80059f6:	4283      	cmp	r3, r0
 80059f8:	dc05      	bgt.n	8005a06 <__swbuf_r+0x4e>
 80059fa:	4621      	mov	r1, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7ff f93d 	bl	8004c7c <_fflush_r>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d1ed      	bne.n	80059e2 <__swbuf_r+0x2a>
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60a3      	str	r3, [r4, #8]
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	6022      	str	r2, [r4, #0]
 8005a12:	701e      	strb	r6, [r3, #0]
 8005a14:	6962      	ldr	r2, [r4, #20]
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d004      	beq.n	8005a26 <__swbuf_r+0x6e>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	07db      	lsls	r3, r3, #31
 8005a20:	d5e1      	bpl.n	80059e6 <__swbuf_r+0x2e>
 8005a22:	2e0a      	cmp	r6, #10
 8005a24:	d1df      	bne.n	80059e6 <__swbuf_r+0x2e>
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f7ff f927 	bl	8004c7c <_fflush_r>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d0d9      	beq.n	80059e6 <__swbuf_r+0x2e>
 8005a32:	e7d6      	b.n	80059e2 <__swbuf_r+0x2a>

08005a34 <__swsetup_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4b29      	ldr	r3, [pc, #164]	@ (8005adc <__swsetup_r+0xa8>)
 8005a38:	4605      	mov	r5, r0
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	b118      	cbz	r0, 8005a48 <__swsetup_r+0x14>
 8005a40:	6a03      	ldr	r3, [r0, #32]
 8005a42:	b90b      	cbnz	r3, 8005a48 <__swsetup_r+0x14>
 8005a44:	f7fd ffc8 	bl	80039d8 <__sinit>
 8005a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a4c:	0719      	lsls	r1, r3, #28
 8005a4e:	d422      	bmi.n	8005a96 <__swsetup_r+0x62>
 8005a50:	06da      	lsls	r2, r3, #27
 8005a52:	d407      	bmi.n	8005a64 <__swsetup_r+0x30>
 8005a54:	2209      	movs	r2, #9
 8005a56:	602a      	str	r2, [r5, #0]
 8005a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	e033      	b.n	8005acc <__swsetup_r+0x98>
 8005a64:	0758      	lsls	r0, r3, #29
 8005a66:	d512      	bpl.n	8005a8e <__swsetup_r+0x5a>
 8005a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a6a:	b141      	cbz	r1, 8005a7e <__swsetup_r+0x4a>
 8005a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d002      	beq.n	8005a7a <__swsetup_r+0x46>
 8005a74:	4628      	mov	r0, r5
 8005a76:	f7ff fdd7 	bl	8005628 <_free_r>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	2300      	movs	r3, #0
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	b94b      	cbnz	r3, 8005aae <__swsetup_r+0x7a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa4:	d003      	beq.n	8005aae <__swsetup_r+0x7a>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 f83e 	bl	8005b2a <__smakebuf_r>
 8005aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab2:	f013 0201 	ands.w	r2, r3, #1
 8005ab6:	d00a      	beq.n	8005ace <__swsetup_r+0x9a>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	60a2      	str	r2, [r4, #8]
 8005abc:	6962      	ldr	r2, [r4, #20]
 8005abe:	4252      	negs	r2, r2
 8005ac0:	61a2      	str	r2, [r4, #24]
 8005ac2:	6922      	ldr	r2, [r4, #16]
 8005ac4:	b942      	cbnz	r2, 8005ad8 <__swsetup_r+0xa4>
 8005ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005aca:	d1c5      	bne.n	8005a58 <__swsetup_r+0x24>
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	0799      	lsls	r1, r3, #30
 8005ad0:	bf58      	it	pl
 8005ad2:	6962      	ldrpl	r2, [r4, #20]
 8005ad4:	60a2      	str	r2, [r4, #8]
 8005ad6:	e7f4      	b.n	8005ac2 <__swsetup_r+0x8e>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e7f7      	b.n	8005acc <__swsetup_r+0x98>
 8005adc:	20000018 	.word	0x20000018

08005ae0 <__swhatbuf_r>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae8:	4615      	mov	r5, r2
 8005aea:	2900      	cmp	r1, #0
 8005aec:	461e      	mov	r6, r3
 8005aee:	b096      	sub	sp, #88	@ 0x58
 8005af0:	da0c      	bge.n	8005b0c <__swhatbuf_r+0x2c>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	2100      	movs	r1, #0
 8005af6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005afa:	bf14      	ite	ne
 8005afc:	2340      	movne	r3, #64	@ 0x40
 8005afe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b02:	2000      	movs	r0, #0
 8005b04:	6031      	str	r1, [r6, #0]
 8005b06:	602b      	str	r3, [r5, #0]
 8005b08:	b016      	add	sp, #88	@ 0x58
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	466a      	mov	r2, sp
 8005b0e:	f000 f849 	bl	8005ba4 <_fstat_r>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	dbed      	blt.n	8005af2 <__swhatbuf_r+0x12>
 8005b16:	9901      	ldr	r1, [sp, #4]
 8005b18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b20:	4259      	negs	r1, r3
 8005b22:	4159      	adcs	r1, r3
 8005b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b28:	e7eb      	b.n	8005b02 <__swhatbuf_r+0x22>

08005b2a <__smakebuf_r>:
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2e:	079d      	lsls	r5, r3, #30
 8005b30:	4606      	mov	r6, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	d507      	bpl.n	8005b46 <__smakebuf_r+0x1c>
 8005b36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	6163      	str	r3, [r4, #20]
 8005b42:	b003      	add	sp, #12
 8005b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b46:	466a      	mov	r2, sp
 8005b48:	ab01      	add	r3, sp, #4
 8005b4a:	f7ff ffc9 	bl	8005ae0 <__swhatbuf_r>
 8005b4e:	9f00      	ldr	r7, [sp, #0]
 8005b50:	4605      	mov	r5, r0
 8005b52:	4639      	mov	r1, r7
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7fe ff91 	bl	8004a7c <_malloc_r>
 8005b5a:	b948      	cbnz	r0, 8005b70 <__smakebuf_r+0x46>
 8005b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b60:	059a      	lsls	r2, r3, #22
 8005b62:	d4ee      	bmi.n	8005b42 <__smakebuf_r+0x18>
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	f043 0302 	orr.w	r3, r3, #2
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	e7e2      	b.n	8005b36 <__smakebuf_r+0xc>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	6020      	str	r0, [r4, #0]
 8005b80:	b15b      	cbz	r3, 8005b9a <__smakebuf_r+0x70>
 8005b82:	4630      	mov	r0, r6
 8005b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b88:	f000 f81e 	bl	8005bc8 <_isatty_r>
 8005b8c:	b128      	cbz	r0, 8005b9a <__smakebuf_r+0x70>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	f023 0303 	bic.w	r3, r3, #3
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	431d      	orrs	r5, r3
 8005b9e:	81a5      	strh	r5, [r4, #12]
 8005ba0:	e7cf      	b.n	8005b42 <__smakebuf_r+0x18>
	...

08005ba4 <_fstat_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	4d06      	ldr	r5, [pc, #24]	@ (8005bc4 <_fstat_r+0x20>)
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	f7fb fbf5 	bl	80013a0 <_fstat>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	d102      	bne.n	8005bc0 <_fstat_r+0x1c>
 8005bba:	682b      	ldr	r3, [r5, #0]
 8005bbc:	b103      	cbz	r3, 8005bc0 <_fstat_r+0x1c>
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	bd38      	pop	{r3, r4, r5, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000408 	.word	0x20000408

08005bc8 <_isatty_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4d05      	ldr	r5, [pc, #20]	@ (8005be4 <_isatty_r+0x1c>)
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fb fbf3 	bl	80013be <_isatty>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_isatty_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_isatty_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20000408 	.word	0x20000408

08005be8 <_raise_r>:
 8005be8:	291f      	cmp	r1, #31
 8005bea:	b538      	push	{r3, r4, r5, lr}
 8005bec:	4605      	mov	r5, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	d904      	bls.n	8005bfc <_raise_r+0x14>
 8005bf2:	2316      	movs	r3, #22
 8005bf4:	6003      	str	r3, [r0, #0]
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005bfe:	b112      	cbz	r2, 8005c06 <_raise_r+0x1e>
 8005c00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c04:	b94b      	cbnz	r3, 8005c1a <_raise_r+0x32>
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f830 	bl	8005c6c <_getpid_r>
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4628      	mov	r0, r5
 8005c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c16:	f000 b817 	b.w	8005c48 <_kill_r>
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d00a      	beq.n	8005c34 <_raise_r+0x4c>
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	d103      	bne.n	8005c2a <_raise_r+0x42>
 8005c22:	2316      	movs	r3, #22
 8005c24:	6003      	str	r3, [r0, #0]
 8005c26:	2001      	movs	r0, #1
 8005c28:	e7e7      	b.n	8005bfa <_raise_r+0x12>
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c32:	4798      	blx	r3
 8005c34:	2000      	movs	r0, #0
 8005c36:	e7e0      	b.n	8005bfa <_raise_r+0x12>

08005c38 <raise>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	@ (8005c44 <raise+0xc>)
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f7ff bfd3 	b.w	8005be8 <_raise_r>
 8005c42:	bf00      	nop
 8005c44:	20000018 	.word	0x20000018

08005c48 <_kill_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4d06      	ldr	r5, [pc, #24]	@ (8005c68 <_kill_r+0x20>)
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	602b      	str	r3, [r5, #0]
 8005c56:	f7fb fb44 	bl	80012e2 <_kill>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	d102      	bne.n	8005c64 <_kill_r+0x1c>
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	b103      	cbz	r3, 8005c64 <_kill_r+0x1c>
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	bd38      	pop	{r3, r4, r5, pc}
 8005c66:	bf00      	nop
 8005c68:	20000408 	.word	0x20000408

08005c6c <_getpid_r>:
 8005c6c:	f7fb bb32 	b.w	80012d4 <_getpid>

08005c70 <_init>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr

08005c7c <_fini>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr
